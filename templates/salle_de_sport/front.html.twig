{% extends 'front.html.twig' %}

{% block title %}Premium Fitness Clubs{% endblock %}

{% block body %}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
<link href="https://api.mapbox.com/mapbox-gl-js/v2.3.1/mapbox-gl.css" rel="stylesheet" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" rel="stylesheet" />
<script src="https://api.mapbox.com/mapbox-gl-js/v2.3.1/mapbox-gl.js"></script>

<style>
    body {
        background-color: #0f0f0f;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        color: #fff;
    }

    /* Hero Section */
    .hero-section {
        background: linear-gradient(rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.9)), url('{{ asset('images/gym-hero.jpg') }}');
        background-size: cover;
        background-position: center;
        padding: 120px 0;
        position: relative;
        margin-bottom: 80px;
    }

    .hero-content {
        text-align: center;
        max-width: 900px;
        margin: 0 auto;
        padding: 0 20px;
    }

    .hero-title {
        font-size: 52px;
        font-weight: 900;
        margin-bottom: 20px;
        text-transform: uppercase;
        letter-spacing: 2px;
        background: linear-gradient(to right, #ff5e13, #ff8c00);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        animation: fadeInDown 1s both;
    }

    .hero-subtitle {
        color: #e0e0e0;
        font-size: 18px;
        margin-bottom: 40px;
        font-weight: 300;
        line-height: 1.6;
        animation: fadeIn 1.5s both;
    }

    .search-box {
        background: rgba(15, 15, 15, 0.8);
        max-width: 700px;
        margin: 0 auto;
        padding: 30px;
        border-radius: 20px;
        backdrop-filter: blur(10px);
        box-shadow: 0 15px 35px rgba(0, 0, 0, 0.3);
        border: 1px solid rgba(255, 255, 255, 0.1);
        animation: fadeInUp 1s both;
        animation-delay: 0.5s;
    }

    .search-form {
        display: flex;
        flex-wrap: wrap;
        gap: 15px;
    }

    .search-input {
        flex: 1;
        min-width: 250px;
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        color: #fff;
        padding: 15px 20px;
        border-radius: 50px;
        font-size: 16px;
        transition: all 0.3s ease;
    }

    .search-input:focus {
        background: rgba(255, 255, 255, 0.15);
        border-color: #ff5e13;
        outline: none;
        box-shadow: 0 0 0 3px rgba(255, 94, 19, 0.2);
    }

    .search-input::placeholder {
        color: rgba(255, 255, 255, 0.6);
    }

    .search-btn {
        background: linear-gradient(to right, #ff5e13, #ff8c00);
        border: none;
        color: white;
        padding: 15px 30px;
        border-radius: 50px;
        font-weight: 600;
        font-size: 16px;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 10px 20px rgba(255, 94, 19, 0.3);
    }

    .search-btn:hover {
        transform: translateY(-3px);
        box-shadow: 0 15px 30px rgba(255, 94, 19, 0.4);
    }

    /* Filter Tags */
    .filter-tags {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin-top: 20px;
    }

    .filter-tag {
        background: rgba(255, 255, 255, 0.1);
        color: white;
        border: 1px solid rgba(255, 255, 255, 0.2);
        padding: 8px 20px;
        border-radius: 50px;
        font-size: 14px;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .filter-tag:hover, .filter-tag.active {
        background: rgba(255, 94, 19, 0.2);
        border-color: #ff5e13;
        color: #ff5e13;
    }

    /* Section Titles */
    .section-heading {
        text-align: center;
        margin-bottom: 60px;
        position: relative;
    }

    .section-badge {
        background: linear-gradient(135deg, #ff5e13, #ff8c00);
        color: white;
        padding: 8px 16px;
        border-radius: 30px;
        font-size: 13px;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 1px;
        margin-bottom: 15px;
        display: inline-block;
        box-shadow: 0 4px 15px rgba(255, 94, 19, 0.3);
    }

    .section-title {
        font-size: 42px;
        font-weight: 800;
        margin-bottom: 20px;
        color: white;
        letter-spacing: 1px;
    }

    .section-subtitle {
        font-size: 16px;
        color: #aaa;
        max-width: 700px;
        margin: 0 auto;
        line-height: 1.6;
    }

    /* Gym Cards */
    .gyms-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
        gap: 30px;
        padding: 0 15px;
    }

    .gym-card {
        background: linear-gradient(145deg, #181818, #0f0f0f);
        border-radius: 20px;
        overflow: hidden;
        box-shadow: 0 15px 35px rgba(0, 0, 0, 0.3);
        transition: all 0.4s ease;
        height: 100%;
        border: 1px solid rgba(255, 255, 255, 0.1);
        position: relative;
        transform: translateY(0);
        opacity: 0;
        animation: fadeInUp 0.6s forwards;
        animation-delay: calc(var(--i) * 0.1s);
    }

    .gym-card:hover {
        transform: translateY(-15px);
        box-shadow: 0 20px 50px rgba(255, 94, 19, 0.3);
        border-color: rgba(255, 94, 19, 0.3);
    }

    .gym-card img {
        width: 100%;
        height: 250px;
        object-fit: cover;
        transition: all 0.5s ease;
        filter: brightness(0.9);
    }

    .gym-card:hover img {
        transform: scale(1.05);
        filter: brightness(1.1);
    }

    .gym-card .content {
        padding: 30px;
        position: relative;
    }

    .gym-location {
        position: absolute;
        top: -20px;
        left: 30px;
        background: linear-gradient(135deg, #ff5e13, #ff8c00);
        color: white;
        padding: 8px 20px;
        border-radius: 30px;
        font-size: 13px;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 1px;
        box-shadow: 0 5px 15px rgba(255, 94, 19, 0.3);
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .gym-name {
        font-size: 24px;
        font-weight: 700;
        margin: 15px 0;
        color: white;
    }

    .gym-description {
        font-size: 14px;
        color: #aaa;
        margin-bottom: 25px;
        line-height: 1.6;
    }

    .equipment-tags {
        display: flex;
        flex-wrap: wrap;
        gap: 5px;
        margin-bottom: 20px;
    }

    .equipment-tag {
        background: rgba(255, 255, 255, 0.1);
        color: #ccc;
        font-size: 12px;
        padding: 4px 10px;
        border-radius: 20px;
        display: inline-flex;
        align-items: center;
        gap: 5px;
    }

    .btn-group {
        display: flex;
        gap: 15px;
    }

    .btn {
        flex: 1;
        padding: 12px;
        border-radius: 10px;
        font-weight: 600;
        font-size: 14px;
        transition: all 0.3s ease;
        text-align: center;
        text-decoration: none;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
    }

    .btn-primary {
        background: linear-gradient(135deg, #ff5e13, #ff8c00);
        color: white;
        border: none;
        box-shadow: 0 4px 15px rgba(255, 94, 19, 0.3);
    }

    .btn-primary:hover {
        transform: translateY(-3px);
        box-shadow: 0 8px 25px rgba(255, 94, 19, 0.5);
        color: white;
    }

    .btn-secondary {
        background: rgba(255, 255, 255, 0.1);
        color: white;
        border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .btn-secondary:hover {
        background: rgba(255, 255, 255, 0.15);
        border-color: rgba(255, 255, 255, 0.3);
        transform: translateY(-3px);
        color: white;
    }

    /* Map Container */
    .map-container {
        width: 100%;
        height: 0;
        overflow: hidden;
        transition: height 0.5s ease;
        margin-top: 20px;
        border-radius: 15px;
        border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .map-container.active {
        height: 300px;
    }

    /* Results Info */
    .results-info {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
        padding: 0 15px;
    }

    .results-count {
        font-size: 16px;
        color: #aaa;
    }

    .results-count span {
        color: #ff5e13;
        font-weight: 600;
    }

    .sort-options {
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .sort-label {
        color: #aaa;
        font-size: 14px;
    }

    .sort-select {
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        color: white;
        padding: 8px 15px;
        border-radius: 10px;
        font-size: 14px;
        transition: all 0.3s ease;
    }

    .sort-select:focus {
        outline: none;
        border-color: #ff5e13;
    }

    /* Animations */
    @keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(30px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @keyframes fadeIn {
        from {
            opacity: 0;
        }
        to {
            opacity: 1;
        }
    }

    @keyframes fadeInDown {
        from {
            opacity: 0;
            transform: translateY(-30px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    /* No Results Message */
    .no-results {
        background: rgba(255, 255, 255, 0.05);
        border-radius: 15px;
        padding: 50px 30px;
        text-align: center;
        margin: 0 15px;
    }

    .no-results i {
        font-size: 50px;
        color: #555;
        margin-bottom: 20px;
    }

    .no-results h3 {
        font-size: 24px;
        color: white;
        margin-bottom: 15px;
    }

    .no-results p {
        color: #aaa;
        margin-bottom: 25px;
    }

    .btn-reset {
        background: linear-gradient(135deg, #ff5e13, #ff8c00);
        color: white;
        border: none;
        padding: 12px 25px;
        border-radius: 10px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        gap: 8px;
    }

    .btn-reset:hover {
        transform: translateY(-3px);
        box-shadow: 0 8px 25px rgba(255, 94, 19, 0.3);
    }

    /* Loader */
    .loader {
        display: inline-block;
        width: 30px;
        height: 30px;
        border: 3px solid rgba(255, 255, 255, 0.3);
        border-radius: 50%;
        border-top-color: #ff5e13;
        animation: spin 1s linear infinite;
        margin-right: 10px;
    }

    @keyframes spin {
        to {
            transform: rotate(360deg);
        }
    }

    /* Responsive */
    @media (max-width: 768px) {
        .hero-title {
            font-size: 36px;
        }

        .hero-subtitle {
            font-size: 16px;
        }

        .section-title {
            font-size: 32px;
        }

        .gyms-container {
            grid-template-columns: 1fr;
        }

        .search-form {
            flex-direction: column;
        }
    }

    /* Fitness Chatbot */
    .chatbot-toggle {
        position: fixed;
        bottom: 20px;
        right: 20px;
        width: 60px;
        height: 60px;
        border-radius: 50%;
        background: linear-gradient(135deg, #ff5e13, #ff8c00);
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 24px;
        box-shadow: 0 5px 15px rgba(255, 94, 19, 0.4);
        cursor: pointer;
        z-index: 1000;
        transition: all 0.3s ease;
    }

    .chatbot-toggle:hover {
        transform: scale(1.1);
    }

    .chatbot-container {
        position: fixed;
        bottom: 90px;
        right: 20px;
        width: 350px;
        height: 500px;
        background: #1a1a1a;
        border-radius: 20px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
        z-index: 999;
        overflow: hidden;
        display: flex;
        flex-direction: column;
        border: 1px solid rgba(255, 255, 255, 0.1);
        transform: translateY(20px);
        opacity: 0;
        pointer-events: none;
        transition: all 0.3s ease;
    }

    .chatbot-container.active {
        transform: translateY(0);
        opacity: 1;
        pointer-events: all;
    }

    .chatbot-header {
        background: linear-gradient(135deg, #ff5e13, #ff8c00);
        padding: 15px;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .chatbot-title {
        color: white;
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .chatbot-close {
        background: rgba(0, 0, 0, 0.2);
        width: 30px;
        height: 30px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .chatbot-close:hover {
        background: rgba(0, 0, 0, 0.4);
    }

    .chatbot-messages {
        flex: 1;
        padding: 15px;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .chat-message {
        max-width: 80%;
        padding: 12px 15px;
        border-radius: 18px;
        line-height: 1.4;
        font-size: 14px;
        animation: fadeIn 0.3s forwards;
    }

    .bot-message {
        background: #333;
        border-top-left-radius: 5px;
        align-self: flex-start;
    }

    .user-message {
        background: linear-gradient(135deg, #ff5e13, #ff8c00);
        color: white;
        border-top-right-radius: 5px;
        align-self: flex-end;
    }

    .chatbot-input {
        padding: 15px;
        border-top: 1px solid rgba(255, 255, 255, 0.1);
        display: flex;
        gap: 10px;
    }

    .chat-input {
        flex: 1;
        background: rgba(255, 255, 255, 0.1);
        border: none;
        border-radius: 20px;
        padding: 10px 15px;
        color: white;
        outline: none;
    }

    .chat-send {
        background: linear-gradient(135deg, #ff5e13, #ff8c00);
        border: none;
        width: 40px;
        height: 40px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .chat-send:hover {
        transform: scale(1.1);
    }

    /* Form inputs in chat */
    .chat-form {
        display: flex;
        flex-direction: column;
        gap: 10px;
        width: 100%;
    }

    .chat-form-row {
        display: flex;
        gap: 10px;
    }

    .chat-form-input {
        flex: 1;
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: 10px;
        padding: 10px;
        color: white;
        font-size: 14px;
    }

    .chat-form-btn {
        background: linear-gradient(135deg, #ff5e13, #ff8c00);
        color: white;
        border: none;
        border-radius: 10px;
        padding: 10px 15px;
        cursor: pointer;
        font-weight: 600;
        transition: all 0.3s ease;
    }

    .chat-form-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(255, 94, 19, 0.3);
    }

    /* Workout Calendar */
    .workout-calendar {
        background: #222;
        border-radius: 15px;
        padding: 15px;
        margin-top: 10px;
        border: 1px solid rgba(255, 255, 255, 0.1);
        font-size: 14px;
    }

    .calendar-header {
        display: flex;
        justify-content: space-between;
        margin-bottom: 15px;
        padding-bottom: 10px;
        font-weight: 600;
        color: #ff5e13;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        font-size: 18px;
    }

    .calendar-days {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        gap: 10px;
    }

    .calendar-day {
        padding: 10px;
        border-radius: 10px;
        background: #2a2a2a;
        font-size: 13px;
        min-height: 120px;
        border: 1px solid rgba(255, 255, 255, 0.05);
        transition: all 0.3s ease;
    }
    
    .calendar-day:hover {
        background: #333;
        transform: translateY(-3px);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
    }

    .day-name {
        font-weight: 600;
        margin-bottom: 8px;
        color: #ff8c00;
        padding-bottom: 5px;
        border-bottom: 1px dashed rgba(255, 255, 255, 0.1);
        font-size: 14px;
    }

    .workout-item {
        font-size: 12px;
        margin-bottom: 8px;
        color: #ddd;
        padding: 5px 8px;
        background: rgba(255, 255, 255, 0.05);
        border-radius: 5px;
        transition: all 0.3s ease;
    }
    
    .workout-item:hover {
        background: rgba(255, 94, 19, 0.2);
    }
    
    .equipment-tag {
        display: inline-block;
        background: rgba(255, 94, 19, 0.2);
        color: #ff8c00;
        font-size: 10px;
        padding: 2px 6px;
        border-radius: 10px;
        margin-top: 3px;
        margin-right: 3px;
    }
    
    /* Full-width calendar modal */
    .calendar-modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.8);
        z-index: 1001;
        justify-content: center;
        align-items: center;
        padding: 20px;
    }
    
    .calendar-modal.active {
        display: flex;
    }
    
    .calendar-modal-content {
        background: #1a1a1a;
        width: 90%;
        max-width: 1000px;
        height: 80%;
        border-radius: 20px;
        box-shadow: 0 15px 50px rgba(0, 0, 0, 0.5);
        overflow: hidden;
        display: flex;
        flex-direction: column;
        position: relative;
    }
    
    .calendar-modal-header {
        background: linear-gradient(135deg, #ff5e13, #ff8c00);
        padding: 15px 20px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        color: white;
    }
    
    .calendar-modal-title {
        font-size: 20px;
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 10px;
    }
    
    .calendar-modal-close {
        background: rgba(0, 0, 0, 0.2);
        width: 30px;
        height: 30px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.3s ease;
        color: white;
    }
    
    .calendar-modal-close:hover {
        background: rgba(0, 0, 0, 0.4);
    }
    
    .calendar-modal-body {
        flex: 1;
        padding: 20px;
        overflow-y: auto;
    }
    
    .modal-calendar {
        background: transparent;
        margin: 0;
    }
    
    .modal-calendar .calendar-days {
        grid-template-columns: repeat(7, 1fr);
    }
    
    .modal-calendar .calendar-day {
        min-height: 250px;
        padding: 15px;
    }
    
    .modal-calendar .day-name {
        font-size: 16px;
        margin-bottom: 15px;
    }
    
    .modal-calendar .workout-item {
        font-size: 14px;
        padding: 8px 12px;
        margin-bottom: 10px;
    }
    
    .workout-equipment {
        margin-top: 5px;
        display: flex;
        flex-wrap: wrap;
        gap: 5px;
    }
    
    /* Expanded chatbot */
    .chatbot-container {
        width: 400px;
        height: 600px;
    }
    
    .chatbot-messages {
        padding: 20px;
        gap: 20px;
    }
    
    .chat-message {
        max-width: 85%;
        padding: 15px 18px;
        font-size: 15px;
        line-height: 1.5;
    }
    
    .chatbot-input {
        padding: 20px;
    }
    
    .chat-input {
        padding: 12px 20px;
        font-size: 15px;
    }
    
    .chat-send {
        width: 45px;
        height: 45px;
    }

    /* Styles pour les boutons d'action dans le chat */
    .message-actions {
        margin-top: 12px;
    }
    
    .action-buttons {
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
    }
    
    .action-btn {
        background: linear-gradient(135deg, #FF5722, #FF9800);
        color: white;
        border: none;
        border-radius: 20px;
        padding: 8px 15px;
        font-size: 13px;
        cursor: pointer;
        display: flex;
        align-items: center;
        transition: all 0.3s ease;
        box-shadow: 0 2px 5px rgba(0,0,0,0.2);
    }
    
    .action-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.3);
    }
    
    .action-btn i {
        margin-right: 6px;
    }
    
    .view-diet-btn {
        background: linear-gradient(135deg, #4CAF50, #8BC34A);
    }
    
    .view-body-btn {
        background: linear-gradient(135deg, #2196F3, #03A9F4);
    }
    
    @media (max-width: 768px) {
        .action-buttons {
            flex-direction: column;
            width: 100%;
        }
        
        .action-btn {
            width: 100%;
            justify-content: center;
        }
    }
</style>

<!-- Hero Section -->
<section class="hero-section">
    <div class="hero-content">
        <h1 class="hero-title">Premium Fitness Centers</h1>
        <p class="hero-subtitle">Discover our exclusive selection of top-tier gyms designed to elevate your fitness journey</p>
        
        <!-- Widget Météo -->
        <div class="weather-widget" id="weather-widget" style="
            background: rgba(15, 15, 15, 0.7);
            border-radius: 15px;
            padding: 15px;
            margin: 0 auto 20px;
            max-width: 250px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            display: flex;
            flex-direction: column;
            align-items: center;
            transition: all 0.3s ease;
            animation: fadeInDown 1s both;
            animation-delay: 0.2s;
        ">
            <div style="display: flex; justify-content: space-between; align-items: center; width: 100%; margin-bottom: 10px;">
                <div style="font-size: 16px; font-weight: 600; color: white;">
                    <i class="fas fa-map-marker-alt" style="color: #4CAF50; margin-right: 5px;"></i>
                    Tunis, Tunisie
                </div>
                <div style="font-size: 12px; color: #aaa;" id="weather-time">
                    15:13
                </div>
            </div>
            
            <div style="display: flex; justify-content: center; align-items: center; margin: 10px 0;">
                <i class="fas fa-sun" style="color: #FFD700; font-size: 40px; margin-right: 10px;"></i>
                <div style="font-size: 32px; font-weight: 700; color: white;">
                    28°C
                </div>
            </div>
            
            <div style="text-align: center; color: #ddd; margin-bottom: 10px; font-weight: 500;">
                Ciel dégagé
            </div>
            
            <div style="display: flex; justify-content: space-between; width: 100%; margin-top: 10px; border-top: 1px solid rgba(255,255,255,0.1); padding-top: 10px;">
                <div style="text-align: center; flex: 1;">
                    <i class="fas fa-thermometer-half" style="color: #FF5722; font-size: 16px;"></i>
                    <div style="font-size: 12px; color: #aaa; margin-top: 5px;">Ressenti</div>
                    <div style="font-weight: 600; color: white;">26°C</div>
                </div>
                
                <div style="text-align: center; flex: 1;">
                    <i class="fas fa-tint" style="color: #2196F3; font-size: 16px;"></i>
                    <div style="font-size: 12px; color: #aaa; margin-top: 5px;">Humidité</div>
                    <div style="font-weight: 600; color: white;">60%</div>
                </div>
                
                <div style="text-align: center; flex: 1;">
                    <i class="fas fa-wind" style="color: #90CAF9; font-size: 16px;"></i>
                    <div style="font-size: 12px; color: #aaa; margin-top: 5px;">Vent</div>
                    <div style="font-weight: 600; color: white;">12 km/h</div>
                </div>
            </div>
        </div>
        
        <div class="search-box">
            <form class="search-form">
                <input type="text" class="search-input" id="search-gym" placeholder="Search by gym name, region or zone...">
                <button type="button" class="search-btn" id="search-btn">
                    <i class="fas fa-search me-2"></i> Find Gym
                </button>
            </form>
            
            <div class="filter-tags">
                {% set regions = [] %}
                {% for gym in salle_de_sports %}
                    {% if gym.region not in regions %}
                        {% set regions = regions|merge([gym.region]) %}
                    {% endif %}
                {% endfor %}
                
                <div class="filter-tag active" data-filter="all">
                    <i class="fas fa-th-large"></i> All
                </div>
                
                {% for region in regions %}
                    <div class="filter-tag" data-filter="{{ region }}">
                        <i class="fas fa-map-marker-alt"></i> {{ region }}
                    </div>
                {% endfor %}
            </div>

            <div style="margin-top: 20px; text-align: center;">
                <a href="{{ path('app_workout_calendar') }}" class="btn btn-primary">
                    <i class="fas fa-calendar-alt me-2"></i> View My Workout Calendar
                </a>
            </div>
        </div>
    </div>
</section>

<!-- Gyms Section -->
<section class="gyms-section">
    <div class="container">
        <div class="section-heading">
            <span class="section-badge">World-Class Facilities</span>
            <h2 class="section-title">Explore Our Premium Gyms</h2>
            <p class="section-subtitle">Each location offers state-of-the-art equipment, expert trainers, and personalized amenities to help you achieve your fitness goals</p>
        </div>
        
        <div class="results-info">
            <div class="results-count" id="results-counter">
                Showing <span id="shown-count">{{ salle_de_sports|length }}</span> of <span id="total-count">{{ salle_de_sports|length }}</span> gyms
            </div>
            
            <div class="sort-options">
                <span class="sort-label">Sort by:</span>
                <select class="sort-select" id="sort-select">
                    <option value="az">Name (A-Z)</option>
                    <option value="za">Name (Z-A)</option>
                </select>
            </div>
        </div>
        
        <div class="gyms-container" id="gyms-container">
            {% for salle_de_sport in salle_de_sports %}
                <div class="gym-card" style="--i: {{ loop.index }}" data-name="{{ salle_de_sport.nom }}" data-region="{{ salle_de_sport.region }}" data-zone="{{ salle_de_sport.zone }}">
                    {% if salle_de_sport.image is not empty %}
                        {% set imagePath = salle_de_sport.image starts with '/' ? salle_de_sport.image : 'images/' ~ salle_de_sport.image %}
                        <img src="{{ asset(imagePath) }}" alt="{{ salle_de_sport.nom }}" onerror="this.onerror=null;this.src='{{ asset('images/default.jpg') }}';">
                    {% else %}
                        <img src="{{ asset('images/default.jpg') }}" alt="No image">
                    {% endif %}
                    
                    <div class="content">
                        <div class="gym-location">
                            <i class="fas fa-map-marker-alt"></i> {{ salle_de_sport.zone }}
                        </div>
                        
                        <h3 class="gym-name">{{ salle_de_sport.nom|title }}</h3>
                        
                        <p class="gym-description">{{ salle_de_sport.region }} | Premium fitness center with advanced equipment and personalized training programs.</p>
                        
                        <div class="equipment-tags">
                            {% for equipment in salle_de_sport.equipements|slice(0, 3) %}
                                <span class="equipment-tag">
                                    <i class="fas fa-dumbbell"></i> {{ equipment.nom }}
                                </span>
                            {% endfor %}
                            {% if salle_de_sport.equipements|length > 3 %}
                                <span class="equipment-tag">
                                    +{{ salle_de_sport.equipements|length - 3 }}
                                </span>
                            {% endif %}
                        </div>
                        
                        <div class="btn-group">
                            <a href="javascript:void(0);" class="btn btn-secondary" onclick="showPlace('{{ salle_de_sport.zone }}', 'map{{ salle_de_sport.id }}')">
                                <i class="fas fa-map-marker-alt"></i> Show Place
                            </a>
                            <a href="{{ path('app_salle_de_sport_equipementsf', { 'id': salle_de_sport.id }) }}" class="btn btn-primary">
                                <i class="fas fa-dumbbell"></i> Equipment
                            </a>
                        </div>
                        
                        <!-- Map container -->
                        <div id="map{{ salle_de_sport.id }}" class="map-container"></div>
                    </div>
                </div>
            {% else %}
                <div class="no-results">
                    <i class="fas fa-search"></i>
                    <h3>No gyms found</h3>
                    <p>We couldn't find any gyms matching your criteria. Please try different search terms.</p>
                </div>
            {% endfor %}
        </div>
        
        <!-- No Results Message (hidden by default) -->
        <div class="no-results" id="no-results" style="display: none;">
            <i class="fas fa-search"></i>
            <h3>No gyms found</h3>
            <p>We couldn't find any gyms matching your search criteria. Please try different search terms or reset your filters.</p>
            <button class="btn-reset" id="reset-search">
                <i class="fas fa-undo"></i> Reset Search
            </button>
        </div>
    </div>
</section>

<!-- Fitness Chatbot Widget -->
<div class="chatbot-toggle" id="chatbot-toggle">
    <i class="fas fa-comment-dots"></i>
</div>

<div class="chatbot-container" id="chatbot-container">
    <div class="chatbot-header">
        <div class="chatbot-title">
            <i class="fas fa-robot"></i>
            <span>Fitness Advisor</span>
        </div>
        <div class="chatbot-close" id="chatbot-close">
            <i class="fas fa-times"></i>
        </div>
    </div>
    
    <div class="chatbot-messages" id="chatbot-messages">
        <!-- Messages will appear here -->
    </div>
    
    <div class="chatbot-input">
        <input type="text" class="chat-input" id="chat-input" placeholder="Type a message...">
        <button class="chat-send" id="chat-send">
            <i class="fas fa-paper-plane"></i>
        </button>
    </div>
</div>

<!-- Calendar Modal -->
<div class="calendar-modal" id="calendar-modal">
    <div class="calendar-modal-content">
        <div class="calendar-modal-header">
            <div class="calendar-modal-title">
                <i class="fas fa-calendar-alt"></i>
                <span>Your Personalized Workout Plan</span>
            </div>
            <div class="calendar-modal-close" id="calendar-modal-close">
                <i class="fas fa-times"></i>
            </div>
        </div>
        <div class="calendar-modal-body">
            <div id="modal-calendar-container">
                <!-- Modal calendar will be inserted here -->
            </div>
        </div>
    </div>
</div>

<script>
    // Initialize Mapbox
    mapboxgl.accessToken = 'pk.eyJ1IjoiYXJpamNoYWFvdXJpIiwiYSI6ImNtN3FyZTN2cDEyeGcya3MzYjJzYWw3dGgifQ.PDmXhuINWST2Uer-SzPTVw';

    // Function to show location on map
    function showPlace(zone, mapId) {
        const mapContainer = document.getElementById(mapId);
        
        // Toggle map visibility
        if (mapContainer.classList.contains('active')) {
            mapContainer.classList.remove('active');
            return;
        }
        
        mapContainer.classList.add('active');
        
        // Bounding box for Tunisia
        const bbox = '7.5248,30.2304,11.5802,37.5438';

        // Fetch coordinates
        fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(zone)}.json?bbox=${bbox}&access_token=${mapboxgl.accessToken}`)
            .then(response => response.json())
            .then(data => {
                let coordinates;

                if (data.features && data.features.length > 0) {
                    coordinates = data.features[0].center;
                } else {
                    console.warn('No location found for: ' + zone + '. Using default coordinates.');
                    coordinates = [10.1647, 36.8665]; // Default: Ariana, Tunisia
                }

                // Initialize map
                const map = new mapboxgl.Map({
                    container: mapId,
                    style: 'mapbox://styles/mapbox/streets-v11',
                    center: coordinates,
                    zoom: 14
                });

                // Add marker
                new mapboxgl.Marker({
                    color: '#ff5e13'
                })
                .setLngLat(coordinates)
                .addTo(map);

                // Update weather for this location
                updateWeatherFromCoordinates(coordinates[1], coordinates[0]);

                // Add click event to map to update weather for clicked location
                map.on('click', function(e) {
                    const clickedLng = e.lngLat.lng;
                    const clickedLat = e.lngLat.lat;
                    
                    // Add a new marker at the clicked location
                    new mapboxgl.Marker({
                        color: '#4CAF50'
                    })
                    .setLngLat([clickedLng, clickedLat])
                    .addTo(map);
                    
                    // Update weather for this location
                    updateWeatherFromCoordinates(clickedLat, clickedLng);
                });

                // Resize after a small delay to ensure proper rendering
                setTimeout(() => {
                    map.resize();
                }, 200);
            })
            .catch(error => {
                console.error('Error fetching coordinates:', error);
                mapContainer.innerHTML = '<div style="padding: 20px; text-align: center; color: #fff;">Unable to load map. Please try again later.</div>';
            });
    }

    // Function to update weather based on coordinates
    function updateWeatherFromCoordinates(lat, lng) {
        const weatherWidget = document.getElementById('weather-widget');
        if (!weatherWidget) return;
        
        // Show loading state
        weatherWidget.innerHTML = `
            <div class="weather-loading" style="
                text-align: center;
                color: #ddd;
                font-size: 14px;
                padding: 10px;
            ">
                <i class="fas fa-spinner fa-spin" style="margin-right: 8px;"></i> Chargement de la météo...
            </div>
        `;
        
        // Get API key for weather
        const apiKey = 'ce0f1cb12d0242709a395655230710';
        
        // Fetch weather data for these coordinates
        const url = `https://api.weatherapi.com/v1/current.json?key=${apiKey}&q=${lat},${lng}&lang=fr`;
        
        fetch(url)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`Erreur HTTP: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                console.log("Données météo reçues pour l'emplacement sélectionné:", data);
                displayWeather(data);
            })
            .catch(error => {
                console.error('Erreur météo pour l\'emplacement sélectionné:', error);
                showStaticWeather();
            });
    }

    // Document ready
    document.addEventListener('DOMContentLoaded', function() {
        const gymCards = document.querySelectorAll('.gym-card');
        const filterTags = document.querySelectorAll('.filter-tag');
        const searchInput = document.getElementById('search-gym');
        const searchBtn = document.getElementById('search-btn');
        const sortSelect = document.getElementById('sort-select');
        const resetSearchBtn = document.getElementById('reset-search');
        const noResultsDiv = document.getElementById('no-results');
        const gymsContainer = document.getElementById('gyms-container');
        const resultsCounter = document.getElementById('results-counter');
        const shownCountElement = document.getElementById('shown-count');
        const totalCountElement = document.getElementById('total-count');
        
        // Total number of gyms
        const totalGyms = gymCards.length;
        totalCountElement.textContent = totalGyms;
        
        // Search functionality
        function performSearch() {
            const searchTerm = searchInput.value.toLowerCase().trim();
            const activeFilter = document.querySelector('.filter-tag.active').getAttribute('data-filter');
            
            let visibleCount = 0;
            
            gymCards.forEach(card => {
                const name = card.getAttribute('data-name').toLowerCase();
                const region = card.getAttribute('data-region').toLowerCase();
                const zone = card.getAttribute('data-zone').toLowerCase();
                
                // Check if matches search term
                const matchesSearch = !searchTerm || 
                    name.includes(searchTerm) || 
                    region.includes(searchTerm) || 
                    zone.includes(searchTerm);
                
                // Check if matches active filter
                const matchesFilter = activeFilter === 'all' || region === activeFilter.toLowerCase();
                
                // Show/hide based on both conditions
                if (matchesSearch && matchesFilter) {
                    card.style.display = 'block';
                    visibleCount++;
                } else {
                    card.style.display = 'none';
                }
            });
            
            // Update results counter
            shownCountElement.textContent = visibleCount;
            
            // Show/hide no results message
            if (visibleCount === 0) {
                gymsContainer.style.display = 'none';
                noResultsDiv.style.display = 'block';
            } else {
                gymsContainer.style.display = 'grid';
                noResultsDiv.style.display = 'none';
            }
        }
        
        // Filter tags click
        filterTags.forEach(tag => {
            tag.addEventListener('click', function() {
                // Remove active class from all tags
                filterTags.forEach(t => t.classList.remove('active'));
                
                // Add active class to clicked tag
                this.classList.add('active');
                
                // Perform search with new filter
                performSearch();
            });
        });
        
        // Search input event
        searchInput.addEventListener('input', performSearch);
        
        // Search button click
        searchBtn.addEventListener('click', performSearch);
        
        // Reset search
        resetSearchBtn.addEventListener('click', function() {
            searchInput.value = '';
            
            // Reset filters
            filterTags.forEach(tag => {
                tag.classList.remove('active');
                if (tag.getAttribute('data-filter') === 'all') {
                    tag.classList.add('active');
                }
            });
            
            // Show all gyms
            gymCards.forEach(card => {
                card.style.display = 'block';
            });
            
            // Update UI
            shownCountElement.textContent = totalGyms;
            gymsContainer.style.display = 'grid';
            noResultsDiv.style.display = 'none';
        });
        
        // Sorting functionality
        sortSelect.addEventListener('change', function() {
            const sortValue = this.value;
            const cardsArray = Array.from(gymCards);
            
            // Sort the array of cards
            cardsArray.sort((a, b) => {
                const nameA = a.getAttribute('data-name').toLowerCase();
                const nameB = b.getAttribute('data-name').toLowerCase();
                
                if (sortValue === 'az') {
                    return nameA.localeCompare(nameB);
                } else {
                    return nameB.localeCompare(nameA);
                }
            });
            
            // Reorder in the DOM
            cardsArray.forEach(card => {
                gymsContainer.appendChild(card);
            });
        });
        
        // Add Enter key support for search
        searchInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                performSearch();
            }
        });

        // Chatbot Variables
        const chatbotToggle = document.getElementById('chatbot-toggle');
        const chatbotContainer = document.getElementById('chatbot-container');
        const chatbotClose = document.getElementById('chatbot-close');
        const chatMessages = document.getElementById('chatbot-messages');
        const chatInput = document.getElementById('chat-input');
        const chatSend = document.getElementById('chat-send');
        
        // OpenAI API Key (this should ideally be on the server side)
        const OPENAI_API_KEY = '';
        
        // Calendar modal elements
        const calendarModal = document.getElementById('calendar-modal');
        const calendarModalClose = document.getElementById('calendar-modal-close');
        const modalCalendarContainer = document.getElementById('modal-calendar-container');
        
        // Close calendar modal
        calendarModalClose.addEventListener('click', function() {
            calendarModal.classList.remove('active');
        });
        
        // User data
        let userData = {
            height: null,
            weight: null,
            fitnessLevel: null,
            goal: null,
            step: 'language', // Commencer par choisir la langue
            language: 'fr' // Français par défaut
        };
        
        // Ajouter les boutons d'action au chatbot
        const chatbotInput = document.querySelector('.chatbot-input');
        if (chatbotInput) {
            // Créer un conteneur pour les boutons
            const buttonContainer = document.createElement('div');
            buttonContainer.style.display = 'flex';
            buttonContainer.style.marginRight = '10px';
            
            // Créer le bouton de calendrier
            const calendarButton = document.createElement('button');
            calendarButton.id = 'show-calendar-btn';
            calendarButton.innerHTML = '<i class="fas fa-calendar-alt" style="color: white;"></i>';
            calendarButton.style.cssText = `
                background: linear-gradient(135deg, #ff5e13, #ff8c00);
                border: none;
                width: 40px;
                height: 40px;
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                margin-right: 10px;
                cursor: pointer;
                transition: all 0.3s ease;
            `;
            
            // Créer le bouton de tous les détails
            const detailsButton = document.createElement('button');
            detailsButton.id = 'show-all-details-btn';
            detailsButton.innerHTML = '<i class="fas fa-info-circle" style="color: white;"></i>';
            detailsButton.style.cssText = `
                background: linear-gradient(135deg, #3498db, #2980b9);
                border: none;
                width: 40px;
                height: 40px;
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                margin-right: 10px;
                cursor: pointer;
                transition: all 0.3s ease;
            `;
            
            // Ajouter les boutons au conteneur
            buttonContainer.appendChild(calendarButton);
            buttonContainer.appendChild(detailsButton);
            
            // Insérer le conteneur avant l'input du chat
            chatbotInput.insertBefore(buttonContainer, chatInput);
            
            // Ajouter les écouteurs d'événements
            calendarButton.addEventListener('click', function() {
                showWorkoutCalendarInChat();
            });
            
            detailsButton.addEventListener('click', function() {
                sendFullDetails();
            });
            
            // Ajouter des effets de survol
            [calendarButton, detailsButton].forEach(btn => {
                btn.addEventListener('mouseenter', function() {
                    this.style.transform = 'scale(1.1)';
                });
                btn.addEventListener('mouseleave', function() {
                    this.style.transform = 'scale(1)';
                });
            });
        }
        
        // Initial welcome message - language selection
        addBotMessage("Welcome / Bienvenue! Please select your language / Veuillez sélectionner votre langue:", [
            {text: "English", value: "en"},
            {text: "Français", value: "fr"}
        ]);
        
        // Toggle chatbot visibility
        chatbotToggle.addEventListener('click', function() {
            chatbotContainer.classList.add('active');
        });
        
        // Close chatbot
        chatbotClose.addEventListener('click', function() {
            chatbotContainer.classList.remove('active');
        });
        
        // Send message when clicking send button
        chatSend.addEventListener('click', function() {
            sendMessage();
        });
        
        // Send message when pressing Enter
        chatInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });
        
        // Function to add bot message
        function addBotMessage(message, options) {
            const messageElement = document.createElement('div');
            messageElement.classList.add('chat-message', 'bot-message');
            
            // If options (buttons) are provided, create them
            if (options && Array.isArray(options)) {
                let content = `${message}<div class="chat-form" style="margin-top: 10px;">`;
                
                options.forEach(option => {
                    content += `<button class="chat-form-btn option-btn" data-value="${option.value}">${option.text}</button>`;
                });
                
                content += `</div>`;
                messageElement.innerHTML = content;
            } else {
                messageElement.textContent = message;
            }
            
            chatMessages.appendChild(messageElement);
            chatMessages.scrollTop = chatMessages.scrollHeight;
            
            // Add event listeners to buttons if they exist
            setTimeout(() => {
                const buttons = messageElement.querySelectorAll('.option-btn');
                buttons.forEach(button => {
                    button.addEventListener('click', function() {
                        const value = this.getAttribute('data-value');
                        addUserMessage(this.textContent);
                        processUserInput(value);
                    });
                });
            }, 100);
        }
        
        // Function to add user message
        function addUserMessage(message) {
            const messageElement = document.createElement('div');
            messageElement.classList.add('chat-message', 'user-message');
            messageElement.textContent = message;
            chatMessages.appendChild(messageElement);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
        
        // Send message function
        function sendMessage() {
            const message = chatInput.value.trim();
            if (message === '') return;
            
            addUserMessage(message);
            chatInput.value = '';
            
            processUserInput(message);
        }
        
        // Process user input based on current step
        function processUserInput(message) {
            console.log("Étape actuelle:", userData.step);
            console.log("Message reçu:", message);
            
            switch(userData.step) {
                case 'language':
                    processLanguage(message);
                    break;
                case 'height':
                    processHeight(message);
                    break;
                case 'weight':
                    processWeight(message);
                    break;
                case 'fitness_level':
                    processFitnessLevel(message);
                    break;
                case 'goal':
                    processGoal(message);
                    break;
                case 'completed':
                    // Check for special commands
                    if (message.toLowerCase() === 'calendar' || 
                        message.toLowerCase() === 'calendrier' ||
                        message.toLowerCase() === 'show calendar' ||
                        message.toLowerCase() === 'afficher calendrier' ||
                        message.toLowerCase() === 'voir calendrier') {
                        showWorkoutCalendarInChat();
                    } else {
                        processCompleted(message);
                    }
                    break;
                default:
                    processHeight(message);
            }
        }
        
        // Process language selection
        function processLanguage(message) {
            if (message.toLowerCase() === 'english' || message.toLowerCase() === 'en') {
                userData.language = 'en';
                addBotMessage("Great! I'll help you create a personalized workout and meal plan.");
                addBotMessage("To start, please enter your height in cm:");
            } else {
                userData.language = 'fr';
                addBotMessage("Super! Je vais vous aider à créer un programme d'entraînement et un régime alimentaire personnalisés.");
                addBotMessage("Pour commencer, veuillez me donner votre taille en cm:");
            }
            userData.step = 'height';
        }
        
        // Process height input
        function processHeight(message) {
            const height = parseFloat(message.replace(',', '.'));
            
            if (isNaN(height) || height < 100 || height > 250) {
                if (userData.language === 'en') {
                    addBotMessage("This height doesn't seem correct. Please enter your height in cm (example: 175)");
                } else {
                    addBotMessage("Cette taille ne semble pas correcte. Veuillez entrer votre taille en cm (exemple: 175)");
                }
                userData.step = 'height';
                return;
            }
            
            userData.height = height;
            
            if (userData.language === 'en') {
                addBotMessage(`Thank you! Now, what is your weight in kg?`);
            } else {
                addBotMessage(`Merci! Maintenant, quel est votre poids en kg?`);
            }
            userData.step = 'weight';
        }
        
        // Process weight input
        function processWeight(message) {
            const weight = parseFloat(message.replace(',', '.'));
            
            if (isNaN(weight) || weight < 30 || weight > 250) {
                if (userData.language === 'en') {
                    addBotMessage("This weight doesn't seem correct. Please enter your weight in kg (example: 70)");
                } else {
                    addBotMessage("Ce poids ne semble pas correct. Veuillez entrer votre poids en kg (exemple: 70)");
                }
                return;
            }
            
            userData.weight = weight;
            
            // Calculate BMI
            const heightInMeters = userData.height / 100;
            const bmi = userData.weight / (heightInMeters * heightInMeters);
            userData.bmi = bmi.toFixed(1);
            
            // Show BMI information
            let bmiMessage = "";
            if (userData.language === 'en') {
                if (bmi < 18.5) {
                    bmiMessage = `Your BMI is ${bmi.toFixed(1)}, which is considered underweight. I'll create a plan to help you reach a healthy weight.`;
                } else if (bmi >= 18.5 && bmi < 25) {
                    bmiMessage = `Your BMI is ${bmi.toFixed(1)}, which is in the normal range. Perfect! We'll focus on your specific goals.`;
                } else if (bmi >= 25 && bmi < 30) {
                    bmiMessage = `Your BMI is ${bmi.toFixed(1)}, which is considered overweight. I'll create a plan to help you achieve a healthier weight.`;
                } else {
                    bmiMessage = `Your BMI is ${bmi.toFixed(1)}, which is in the obesity range. Don't worry - we'll create a progressive and sustainable plan.`;
                }
            } else {
                if (bmi < 18.5) {
                    bmiMessage = `Votre IMC est de ${bmi.toFixed(1)}, ce qui est considéré comme insuffisant. Je vais créer un plan pour vous aider à atteindre un poids santé.`;
                } else if (bmi >= 18.5 && bmi < 25) {
                    bmiMessage = `Votre IMC est de ${bmi.toFixed(1)}, ce qui est dans la plage normale. Parfait! Nous allons nous concentrer sur vos objectifs spécifiques.`;
                } else if (bmi >= 25 && bmi < 30) {
                    bmiMessage = `Votre IMC est de ${bmi.toFixed(1)}, ce qui est considéré comme un surpoids. Je vais créer un plan pour vous aider à atteindre un poids plus sain.`;
                } else {
                    bmiMessage = `Votre IMC est de ${bmi.toFixed(1)}, ce qui est dans la plage d'obésité. Ne vous inquiétez pas - nous allons créer un plan progressif et durable.`;
                }
            }
            
            addBotMessage(bmiMessage);
            
            // Ask for fitness level
            setTimeout(() => {
                if (userData.language === 'en') {
                    addBotMessage("What is your current fitness level?", [
                        {text: "Beginner", value: "beginner"},
                        {text: "Intermediate", value: "intermediate"},
                        {text: "Advanced", value: "advanced"}
                    ]);
                } else {
                    addBotMessage("Quel est votre niveau de fitness actuel?", [
                        {text: "Débutant", value: "beginner"},
                        {text: "Intermédiaire", value: "intermediate"},
                        {text: "Avancé", value: "advanced"}
                    ]);
                }
                userData.step = 'fitness_level';
            }, 1000);
        }
        
        // Process fitness level input
        function processFitnessLevel(message) {
            const level = message.toLowerCase();
            
            // Check if the input contains key words for fitness levels
            if (level.includes('début') || level === 'beginner' || level === 'débutant') {
                userData.fitnessLevel = userData.language === 'en' ? 'Beginner' : 'Débutant';
            } else if (level.includes('inter') || level === 'intermediate' || level === 'intermédiaire') {
                userData.fitnessLevel = userData.language === 'en' ? 'Intermediate' : 'Intermédiaire';
            } else if (level.includes('avanc') || level === 'advanced' || level === 'avancé') {
                userData.fitnessLevel = userData.language === 'en' ? 'Advanced' : 'Avancé';
            } else {
                if (userData.language === 'en') {
                    addBotMessage("I didn't understand your level. Please choose between Beginner, Intermediate or Advanced.");
                } else {
                    addBotMessage("Je n'ai pas compris votre niveau. Veuillez choisir entre Débutant, Intermédiaire ou Avancé.");
                }
                return;
            }
            
            // Add more detailed explanations based on fitness level
            let levelExplanation = "";
            if (userData.language === 'en') {
                if (userData.fitnessLevel === "Beginner") {
                    levelExplanation = "As a beginner, I'll focus on fundamental movements, good form, and establishing a consistent routine. We'll start with full-body workouts and gradually increase intensity.";
                } else if (userData.fitnessLevel === "Intermediate") {
                    levelExplanation = "As an intermediate exerciser, I'll include more varied exercises, increased intensity, and more specialized training. Your plan will balance strength, cardio, and flexibility.";
                } else {
                    levelExplanation = "For your advanced level, I'll create a challenging program with periodization, advanced techniques, and specialized training splits to help you continue progressing.";
                }
            } else {
                if (userData.fitnessLevel === "Débutant") {
                    levelExplanation = "Comme vous êtes débutant, je vais me concentrer sur des mouvements fondamentaux, une bonne forme, et l'établissement d'une routine cohérente. Nous commencerons par des entraînements pour tout le corps et augmenterons progressivement l'intensité.";
                } else if (userData.fitnessLevel === "Intermédiaire") {
                    levelExplanation = "En tant qu'exerciseur intermédiaire, j'inclurai des exercices plus variés, une intensité accrue et une formation plus spécialisée. Votre plan équilibrera force, cardio et flexibilité.";
                } else {
                    levelExplanation = "Pour votre niveau avancé, je vais créer un programme stimulant avec périodisation, techniques avancées et divisions d'entraînement spécialisées pour vous aider à continuer à progresser.";
                }
            }
            
            addBotMessage(levelExplanation);
            
            // Ask for their primary fitness goal
            setTimeout(() => {
                if (userData.language === 'en') {
                    addBotMessage("What is your primary fitness goal?", [
                        {text: "Lose weight", value: "lose weight"},
                        {text: "Build muscle", value: "build muscle"},
                        {text: "Improve endurance", value: "improve endurance"},
                        {text: "Get stronger", value: "get stronger"},
                        {text: "Improve flexibility", value: "improve flexibility"}
                    ]);
                } else {
                    addBotMessage("Quel est votre objectif principal de fitness?", [
                        {text: "Perdre du poids", value: "lose weight"},
                        {text: "Prendre du muscle", value: "build muscle"},
                        {text: "Améliorer l'endurance", value: "improve endurance"},
                        {text: "Devenir plus fort", value: "get stronger"},
                        {text: "Améliorer la flexibilité", value: "improve flexibility"}
                    ]);
                }
                userData.step = 'goal';
            }, 1200);
        }
        
        // Process goal input
        function processGoal(message) {
            const goal = message.toLowerCase();
            
            // Map input to goals
            if (goal.includes('perd') || goal.includes('poid') || goal === 'lose weight' || goal === 'perdre du poids') {
                userData.goal = userData.language === 'en' ? 'Lose weight' : 'Perdre du poids';
            } else if (goal.includes('muscle') || goal === 'build muscle' || goal === 'prendre du muscle') {
                userData.goal = userData.language === 'en' ? 'Build muscle' : 'Prendre du muscle';
            } else if (goal.includes('endur') || goal === 'improve endurance' || goal === 'améliorer l\'endurance') {
                userData.goal = userData.language === 'en' ? 'Improve endurance' : 'Améliorer l\'endurance';
            } else if (goal.includes('fort') || goal === 'get stronger' || goal === 'devenir plus fort') {
                userData.goal = userData.language === 'en' ? 'Get stronger' : 'Devenir plus fort';
            } else if (goal.includes('flex') || goal === 'improve flexibility' || goal === 'améliorer la flexibilité') {
                userData.goal = userData.language === 'en' ? 'Improve flexibility' : 'Améliorer la flexibilité';
            } else {
                if (userData.language === 'en') {
                    addBotMessage("I didn't understand your goal. Please choose from the options provided.");
                } else {
                    addBotMessage("Je n'ai pas compris votre objectif. Veuillez choisir parmi les options proposées.");
                }
                return;
            }
            
            // Generate plan based on goal
            if (userData.language === 'en') {
                addBotMessage("Great! I'm now going to create a personalized workout and nutrition plan for you.");
            } else {
                addBotMessage("Super! Je vais maintenant créer un plan d'entraînement et de nutrition personnalisé pour vous.");
            }
            
            // Show that we're generating the plan
            setTimeout(() => {
                if (userData.language === 'en') {
                    addBotMessage(`Creating your personalized plan for ${userData.height}cm, ${userData.weight}kg, ${userData.fitnessLevel} level, with a goal to ${userData.goal}...`);
                } else {
                    addBotMessage(`Création de votre plan personnalisé pour ${userData.height}cm, ${userData.weight}kg, niveau ${userData.fitnessLevel}, avec un objectif de ${userData.goal}...`);
                }
                
                // Generate the plan after a short delay
                setTimeout(() => {
                    // Create workout and meal plans
                    generatePlan();
                    
                    // Ajouter des boutons d'action après avoir généré le plan
                    setTimeout(() => {
                        // Créer le HTML pour les boutons
                        let buttonsHTML = `
                            <div style="margin-top: 15px; display: flex; flex-wrap: wrap; gap: 10px; justify-content: center;">
                                <button id="quick-view-calendar" class="action-btn" style="
                                    background: linear-gradient(135deg, #ff5e13, #ff8c00);
                                    color: white;
                                    border: none;
                                    padding: 10px 20px;
                                    border-radius: 25px;
                                    font-size: 14px;
                                    cursor: pointer;
                                    display: flex;
                                    align-items: center;
                                    box-shadow: 0 4px 15px rgba(255,94,19,0.3);
                                    transition: all 0.3s ease;
                                ">
                                    <i class="fas fa-calendar-alt" style="margin-right: 8px;"></i>
                                    ${userData.language === 'en' ? 'View Workout Calendar' : 'Voir Calendrier d\'Entraînement'}
                                </button>
                                <button id="quick-view-diet" class="action-btn" style="
                                    background: linear-gradient(135deg, #4CAF50, #8BC34A);
                                    color: white;
                                    border: none;
                                    padding: 10px 20px;
                                    border-radius: 25px;
                                    font-size: 14px;
                                    cursor: pointer;
                                    display: flex;
                                    align-items: center;
                                    box-shadow: 0 4px 15px rgba(76,175,80,0.3);
                                    transition: all 0.3s ease;
                                ">
                                    <i class="fas fa-utensils" style="margin-right: 8px;"></i>
                                    ${userData.language === 'en' ? 'View Meal Plan' : 'Voir Plan Nutritionnel'}
                                </button>
                            </div>
                        `;
                        
                        // Ajouter les boutons au chat
                        const messageElement = document.createElement('div');
                        messageElement.classList.add('chat-message', 'bot-message');
                        messageElement.innerHTML = buttonsHTML;
                        chatMessages.appendChild(messageElement);
                        chatMessages.scrollTop = chatMessages.scrollHeight;
                        
                        // Ajouter les écouteurs d'événements aux boutons
                        setTimeout(() => {
                            const viewCalendarButton = document.getElementById('quick-view-calendar');
                            const viewDietButton = document.getElementById('quick-view-diet');
                            
                            if (viewCalendarButton) {
                                viewCalendarButton.addEventListener('click', function() {
                                    showWorkoutCalendarModal();
                                });
                                
                                // Ajouter des effets de survol
                                viewCalendarButton.addEventListener('mouseenter', function() {
                                    this.style.transform = 'translateY(-3px)';
                                    this.style.boxShadow = '0 6px 20px rgba(255,94,19,0.4)';
                                });
                                
                                viewCalendarButton.addEventListener('mouseleave', function() {
                                    this.style.transform = 'translateY(0)';
                                    this.style.boxShadow = '0 4px 15px rgba(255,94,19,0.3)';
                                });
                            }
                            
                            if (viewDietButton) {
                                viewDietButton.addEventListener('click', function() {
                                    const mealPlan = JSON.parse(localStorage.getItem('mealPlans')) || {};
                                    showMealPlanModal(mealPlan);
                                });
                                
                                // Ajouter des effets de survol
                                viewDietButton.addEventListener('mouseenter', function() {
                                    this.style.transform = 'translateY(-3px)';
                                    this.style.boxShadow = '0 6px 20px rgba(76,175,80,0.4)';
                                });
                                
                                viewDietButton.addEventListener('mouseleave', function() {
                                    this.style.transform = 'translateY(0)';
                                    this.style.boxShadow = '0 4px 15px rgba(76,175,80,0.3)';
                                });
                            }
                        }, 100);
                    }, 1000);
                }, 1500);
            }, 1000);
        }

        // Process completed state
        function processCompleted(message) {
            // If they ask a question, provide a helpful response
            if (userData.language === 'en') {
                if (message.toLowerCase().includes('thank') || message.toLowerCase().includes('thanks')) {
                    addBotMessage("You're welcome! Don't hesitate to visit your workout calendar regularly to track your progress. Good luck with your training!");
                } else if (message.toLowerCase().includes('how') || message.toLowerCase().includes('when') || message.toLowerCase().includes('what')) {
                    addBotMessage("For best results, follow the plan 4-5 days per week. You should see progress after 3-4 weeks of consistent training. Remember to stay hydrated and get plenty of rest between workouts!");
                } else if (message.toLowerCase().includes('calendar') || message.toLowerCase().includes('show') || message.toLowerCase().includes('workout')) {
                    showWorkoutCalendar();
                } else {
                    addBotMessage("I hope your plan works well for you! Check your workout calendar to see all the details. I wish you great success on your fitness journey!");
                }
            } else {
                if (message.toLowerCase().includes('merci') || message.toLowerCase().includes('thanks')) {
                    addBotMessage("De rien! N'hésitez pas à visiter votre calendrier d'entraînement régulièrement pour suivre vos progrès. Bon entraînement!");
                } else if (message.toLowerCase().includes('combien') || message.toLowerCase().includes('how') || message.toLowerCase().includes('quand')) {
                    addBotMessage("Pour de meilleurs résultats, suivez le plan 4-5 jours par semaine. Vous devriez voir des progrès après 3-4 semaines d'entraînement régulier. N'oubliez pas de vous hydrater et de bien récupérer entre les séances!");
                } else if (message.toLowerCase().includes('calendrier') || message.toLowerCase().includes('montre') || message.toLowerCase().includes('entraînement')) {
                    showWorkoutCalendar();
                } else {
                    addBotMessage("J'espère que votre plan vous convient! Consultez votre calendrier d'entraînement pour voir tous les détails. Je vous souhaite beaucoup de succès dans votre parcours fitness!");
                }
            }
        }

        // Function to show workout calendar in chat
        function showWorkoutCalendarInChat() {
            // Récupérer les données d'entraînement et de repas du localStorage
            const workoutData = JSON.parse(localStorage.getItem('workoutProgress')) || {};
            
            // Utiliser le format standard des plans de repas, comme dans le calendrier
            let mealPlanData = JSON.parse(localStorage.getItem('mealPlans')) || {};
            
            // Si pas de données spécifiques, utiliser la structure standard
            if (!mealPlanData || Object.keys(mealPlanData).length === 0) {
                mealPlanData = {
                    'Monday': {
                        breakfast: 'Protein oatmeal with banana and almonds',
                        lunch: 'Grilled chicken salad with olive oil dressing',
                        dinner: 'Baked salmon with quinoa and roasted vegetables',
                        snacks: 'Greek yogurt with berries, protein shake'
                    },
                    'Tuesday': {
                        breakfast: 'Vegetable omelet with whole grain toast',
                        lunch: 'Turkey and avocado wrap with mixed greens',
                        dinner: 'Lean beef stir fry with brown rice and vegetables',
                        snacks: 'Apple with peanut butter, cottage cheese'
                    },
                    'Wednesday': {
                        breakfast: 'Protein smoothie with spinach, berries, and plant protein',
                        lunch: 'Tuna salad sandwich on whole grain bread',
                        dinner: 'Grilled chicken with sweet potato and steamed broccoli',
                        snacks: 'Hard-boiled eggs, carrots with hummus'
                    },
                    'Thursday': {
                        breakfast: 'Greek yogurt parfait with granola and fruit',
                        lunch: 'Quinoa bowl with roasted vegetables and chickpeas',
                        dinner: 'Baked white fish with asparagus and wild rice',
                        snacks: 'Protein bar, handful of mixed nuts'
                    },
                    'Friday': {
                        breakfast: 'Avocado toast with scrambled eggs',
                        lunch: 'Chicken and vegetable soup with whole grain roll',
                        dinner: 'Turkey burgers (no bun) with sweet potato fries and salad',
                        snacks: 'Banana with almond butter, protein shake'
                    },
                    'Saturday': {
                        breakfast: 'Egg white breakfast burrito with vegetables',
                        lunch: 'Salmon poke bowl with brown rice and avocado',
                        dinner: 'Grilled steak with roasted potatoes and grilled zucchini',
                        snacks: 'Greek yogurt, dark chocolate square'
                    },
                    'Sunday': {
                        breakfast: 'Whole grain pancakes with berries and light syrup',
                        lunch: 'Mediterranean salad with grilled halloumi cheese',
                        dinner: 'Roast chicken with vegetables and quinoa',
                        snacks: 'Fruit salad, small handful of trail mix'
                    }
                };
                // Sauvegarder pour maintenir la cohérence
                localStorage.setItem('mealPlans', JSON.stringify(mealPlanData));
            }
            
            // Créer HTML pour le calendrier
            let calendarHTML = `
                <div style="background: linear-gradient(to bottom, rgba(25,25,25,0.9), rgba(35,35,35,0.9)); border-radius: 15px; padding: 20px; margin-top: 15px; box-shadow: 0 10px 30px rgba(0,0,0,0.3); border: 1px solid rgba(255,94,19,0.3);">
                    <h4 style="margin-top: 0; color: #ff5e13; text-align: center; margin-bottom: 20px; font-size: 18px; text-transform: uppercase; letter-spacing: 1px;">
                        <i class="fas fa-calendar-alt" style="margin-right: 8px;"></i> ${userData.language === 'en' ? 'Your Complete Fitness Plan' : 'Votre Plan Fitness Complet'}
                    </h4>
                    <div style="margin-bottom: 15px; text-align: center; color: #aaa; font-size: 14px; padding-bottom: 15px; border-bottom: 1px solid rgba(255,255,255,0.1);">
                        ${userData.language === 'en' ? 
                            `<span style="color: #ff8c00; font-weight: 600;">${userData.fitnessLevel}</span> level • Goal: <span style="color: #ff8c00; font-weight: 600;">${userData.goal}</span>` :
                            `Niveau <span style="color: #ff8c00; font-weight: 600;">${userData.fitnessLevel}</span> • Objectif: <span style="color: #ff8c00; font-weight: 600;">${userData.goal}</span>`
                        }
                    </div>
                    
                    <!-- Navigation pour les jours -->
                    <div style="display: flex; justify-content: space-between; margin-bottom: 20px; border-radius: 10px; background: rgba(0,0,0,0.2); padding: 10px; overflow-x: auto; white-space: nowrap;">
            `;
            
            // Jours de la semaine
            const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
            const dayNames = userData.language === 'en' 
                ? ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
                : ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi', 'Dimanche'];
            
            // Ajouter les onglets pour chaque jour
            days.forEach((day, index) => {
                const isActive = index === 0; // Premier jour actif par défaut
                calendarHTML += `
                    <div class="day-tab" data-day="${day}" style="
                        padding: 8px 16px;
                        border-radius: 20px;
                        font-size: 13px;
                        font-weight: 600;
                        cursor: pointer;
                        margin-right: 5px;
                        transition: all 0.3s ease;
                        background: ${isActive ? 'linear-gradient(135deg, #ff5e13, #ff8c00)' : 'rgba(255,255,255,0.05)'};
                        color: ${isActive ? 'white' : '#aaa'};
                    ">
                        ${dayNames[index].substring(0, 3)}
                    </div>
                `;
            });
            
            calendarHTML += `
                    </div>
                    
                    <!-- Conteneur pour les détails de chaque jour -->
                    <div id="day-details-container">
            `;
            
            // Ajouter les détails pour chaque jour (au départ seul le premier jour est visible)
            days.forEach((day, index) => {
                const isVisible = index === 0; // Premier jour visible par défaut
                const exercises = workoutData[day] || [];
                const dayMeals = mealPlanData[day] || {
                    breakfast: userData.language === 'en' ? 'Protein oatmeal with banana and almonds' : 'Flocons d\'avoine protéinés avec banane et amandes',
                    lunch: userData.language === 'en' ? 'Grilled chicken salad with olive oil dressing' : 'Salade de poulet grillé avec vinaigrette à l\'huile d\'olive', 
                    dinner: userData.language === 'en' ? 'Baked salmon with quinoa and roasted vegetables' : 'Saumon au four avec quinoa et légumes rôtis',
                    snacks: userData.language === 'en' ? 'Greek yogurt with berries, protein shake' : 'Yaourt grec avec baies, shake protéiné'
                };
                
                // Calculer le pourcentage d'achèvement
                const completed = exercises.filter(ex => ex.completed).length;
                const total = exercises.length;
                const percent = total > 0 ? Math.round((completed / total) * 100) : 0;
                
                calendarHTML += `
                    <div class="day-details" id="details-${day}" style="display: ${isVisible ? 'block' : 'none'};">
                        <div style="display: flex; flex-direction: column; gap: 15px;">
                            <!-- En-tête avec le nom du jour et la progression -->
                            <div style="display: flex; justify-content: space-between; align-items: center; background: rgba(0,0,0,0.2); padding: 12px 15px; border-radius: 10px;">
                                <div style="font-size: 18px; font-weight: 600; color: #ff8c00;">
                                    ${dayNames[index]}
                                </div>
                                <div style="display: flex; align-items: center; gap: 10px;">
                                    <div style="width: 100px; height: 8px; background: rgba(255,255,255,0.1); border-radius: 4px; overflow: hidden;">
                                        <div style="background: linear-gradient(to right, #ff5e13, #ff8c00); width: ${percent}%; height: 100%;"></div>
                                    </div>
                                    <div style="color: #ccc; font-size: 13px;">
                                        ${percent}%
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Contenu en deux colonnes (Entraînement et Nutrition) -->
                            <div style="display: flex; gap: 15px; flex-wrap: wrap;">
                                <!-- Colonne d'entraînement -->
                                <div style="flex: 1; min-width: 250px; background: rgba(255,255,255,0.03); border-radius: 10px; padding: 15px; border: 1px solid rgba(255,255,255,0.05);">
                                    <div style="font-size: 15px; font-weight: 600; color: #ff5e13; margin-bottom: 12px; display: flex; align-items: center;">
                                        <i class="fas fa-dumbbell" style="margin-right: 8px;"></i> ${userData.language === 'en' ? 'Workout Plan' : 'Plan d\'Entraînement'}
                                    </div>
                                    
                                    <div style="max-height: 250px; overflow-y: auto; padding-right: 5px;">
                `;
                
                // Ajouter les exercices
                if (exercises.length > 0) {
                    exercises.forEach((exercise, exIndex) => {
                        calendarHTML += `
                            <div style="margin-bottom: 10px; background: rgba(0,0,0,0.2); border-radius: 8px; padding: 10px; border-left: 3px solid ${exercise.completed ? '#ff5e13' : 'rgba(255,255,255,0.1)'};">
                                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 6px;">
                                    <div style="font-weight: 600; color: ${exercise.completed ? '#ff8c00' : '#ddd'};">
                                        ${exercise.name}
                                    </div>
                                    <div style="color: #aaa; font-size: 12px;">
                                        ${exercise.sets}
                                    </div>
                                </div>
                                
                                <div style="display: flex; flex-wrap: wrap; gap: 5px; margin-top: 8px;">
                        `;
                        
                        // Ajouter les équipements
                        if (exercise.equipment && exercise.equipment.length > 0) {
                            exercise.equipment.forEach(eq => {
                                calendarHTML += `
                                    <span style="font-size: 11px; padding: 3px 8px; background: rgba(255,94,19,0.1); border-radius: 10px; color: #ff8c00;">
                                        ${eq}
                                    </span>
                                `;
                            });
                        }
                        
                        calendarHTML += `
                                </div>
                            </div>
                        `;
                    });
                } else {
                    calendarHTML += `
                        <div style="text-align: center; color: #aaa; padding: 20px 0;">
                            ${userData.language === 'en' ? 'Rest day' : 'Jour de repos'}
                        </div>
                    `;
                }
                
                calendarHTML += `
                                    </div>
                                </div>
                                
                                <!-- Colonne de nutrition -->
                                <div style="flex: 1; min-width: 250px; background: rgba(255,255,255,0.03); border-radius: 10px; padding: 15px; border: 1px solid rgba(255,255,255,0.05);">
                                    <div style="font-size: 15px; font-weight: 600; color: #ff5e13; margin-bottom: 12px; display: flex; align-items: center;">
                                        <i class="fas fa-utensils" style="margin-right: 8px;"></i> ${userData.language === 'en' ? 'Meal Plan' : 'Plan de Repas'}
                                    </div>
                                    
                                    <div style="max-height: 250px; overflow-y: auto; padding-right: 5px;">
                                        <!-- Petit-déjeuner -->
                                        <div style="margin-bottom: 10px; background: rgba(0,0,0,0.2); border-radius: 8px; padding: 10px; border-left: 3px solid rgba(255,140,0,0.5);">
                                            <div style="font-weight: 600; color: #ff8c00; margin-bottom: 5px; display: flex; align-items: center;">
                                                <i class="fas fa-mug-hot" style="margin-right: 8px; font-size: 12px;"></i>
                                                ${userData.language === 'en' ? 'Breakfast' : 'Petit-déjeuner'}
                                            </div>
                                            <div style="color: #ddd; font-size: 13px;">
                                                ${dayMeals.breakfast}
                                            </div>
                                        </div>
                                        
                                        <!-- Déjeuner -->
                                        <div style="margin-bottom: 10px; background: rgba(0,0,0,0.2); border-radius: 8px; padding: 10px; border-left: 3px solid rgba(255,140,0,0.5);">
                                            <div style="font-weight: 600; color: #ff8c00; margin-bottom: 5px; display: flex; align-items: center;">
                                                <i class="fas fa-hamburger" style="margin-right: 8px; font-size: 12px;"></i>
                                                ${userData.language === 'en' ? 'Lunch' : 'Déjeuner'}
                                            </div>
                                            <div style="color: #ddd; font-size: 13px;">
                                                ${dayMeals.lunch}
                                            </div>
                                        </div>
                                        
                                        <!-- Dîner -->
                                        <div style="margin-bottom: 10px; background: rgba(0,0,0,0.2); border-radius: 8px; padding: 10px; border-left: 3px solid rgba(255,140,0,0.5);">
                                            <div style="font-weight: 600; color: #ff8c00; margin-bottom: 5px; display: flex; align-items: center;">
                                                <i class="fas fa-utensils" style="margin-right: 8px; font-size: 12px;"></i>
                                                ${userData.language === 'en' ? 'Dinner' : 'Dîner'}
                                            </div>
                                            <div style="color: #ddd; font-size: 13px;">
                                                ${dayMeals.dinner}
                                            </div>
                                        </div>
                                        
                                        <!-- Collations -->
                                        <div style="background: rgba(0,0,0,0.2); border-radius: 8px; padding: 10px; border-left: 3px solid rgba(255,140,0,0.5);">
                                            <div style="font-weight: 600; color: #ff8c00; margin-bottom: 5px; display: flex; align-items: center;">
                                                <i class="fas fa-apple-alt" style="margin-right: 8px; font-size: 12px;"></i>
                                                ${userData.language === 'en' ? 'Snacks' : 'Collations'}
                                            </div>
                                            <div style="color: #ddd; font-size: 13px;">
                                                ${dayMeals.snacks}
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            });
            
            calendarHTML += `
                    </div>
                    
                    <!-- Boutons d'action -->
                    <div style="margin-top: 20px; display: flex; justify-content: center; gap: 15px;">
                        <button id="open-full-calendar-btn" class="btn btn-primary" style="background: linear-gradient(135deg, #ff5e13, #ff8c00); border: none; color: white; padding: 10px 20px; border-radius: 25px; font-size: 14px; text-decoration: none; display: flex; align-items: center; box-shadow: 0 4px 15px rgba(255,94,19,0.3);">
                            <i class="fas fa-external-link-alt" style="margin-right: 8px;"></i> ${userData.language === 'en' ? 'Open Full Calendar' : 'Ouvrir Calendrier Complet'}
                        </button>
                        <button id="toggle-diet-plan-btn" class="btn" style="background: rgba(255,255,255,0.1); border: 1px solid rgba(255,255,255,0.2); color: white; padding: 10px 20px; border-radius: 25px; font-size: 14px; cursor: pointer; display: flex; align-items: center;">
                            <i class="fas fa-utensils" style="margin-right: 8px;"></i> ${userData.language === 'en' ? 'View Detailed Diet' : 'Voir Régime Détaillé'}
                        </button>
                    </div>
                </div>
            `;
            
            // Ajouter au chat
            const messageElement = document.createElement('div');
            messageElement.classList.add('chat-message', 'bot-message');
            messageElement.innerHTML = calendarHTML;
            chatMessages.appendChild(messageElement);
            chatMessages.scrollTop = chatMessages.scrollHeight;
            
            // Ajouter les écouteurs d'événements pour les onglets de jours
            setTimeout(() => {
                const dayTabs = document.querySelectorAll('.day-tab');
                dayTabs.forEach(tab => {
                    tab.addEventListener('click', function() {
                        // Désactiver tous les onglets
                        dayTabs.forEach(t => {
                            t.style.background = 'rgba(255,255,255,0.05)';
                            t.style.color = '#aaa';
                        });
                        
                        // Activer l'onglet cliqué
                        this.style.background = 'linear-gradient(135deg, #ff5e13, #ff8c00)';
                        this.style.color = 'white';
                        
                        // Cacher tous les détails
                        const dayDetails = document.querySelectorAll('.day-details');
                        dayDetails.forEach(details => {
                            details.style.display = 'none';
                        });
                        
                        // Afficher les détails du jour sélectionné
                        const selectedDay = this.getAttribute('data-day');
                        document.getElementById(`details-${selectedDay}`).style.display = 'block';
                    });
                });
                
                // Ajouter un écouteur pour le bouton de calendrier complet
                const calendarButton = document.getElementById('open-full-calendar-btn');
                if (calendarButton) {
                    calendarButton.addEventListener('click', function() {
                        // Afficher le calendrier modal ou rediriger vers la page du calendrier
                        showWorkoutCalendarModal();
                    });
                }
                
                // Ajouter un écouteur pour le bouton de régime détaillé
                const dietButton = document.getElementById('toggle-diet-plan-btn');
                if (dietButton) {
                    dietButton.addEventListener('click', function() {
                        const mealPlan = JSON.parse(localStorage.getItem('mealPlans')) || {};
                        showMealPlanModal(mealPlan);
                    });
                }
            }, 100);
        }

        // Afficher les détails complets du plan nutritionnel
        function showFullNutritionDetails() {
            // Récupérer les données
            const workoutData = JSON.parse(localStorage.getItem('workoutProgress')) || {};
            
            // Utiliser le format standard des plans de repas comme dans le calendrier
            let mealPlanData = JSON.parse(localStorage.getItem('mealPlans')) || {};
            
            // Si pas de données spécifiques, utiliser la structure standard
            if (!mealPlanData || Object.keys(mealPlanData).length === 0) {
                mealPlanData = {
                    'Monday': {
                        breakfast: 'Protein oatmeal with banana and almonds',
                        lunch: 'Grilled chicken salad with olive oil dressing',
                        dinner: 'Baked salmon with quinoa and roasted vegetables',
                        snacks: 'Greek yogurt with berries, protein shake'
                    },
                    'Tuesday': {
                        breakfast: 'Vegetable omelet with whole grain toast',
                        lunch: 'Turkey and avocado wrap with mixed greens',
                        dinner: 'Lean beef stir fry with brown rice and vegetables',
                        snacks: 'Apple with peanut butter, cottage cheese'
                    },
                    'Wednesday': {
                        breakfast: 'Protein smoothie with spinach, berries, and plant protein',
                        lunch: 'Tuna salad sandwich on whole grain bread',
                        dinner: 'Grilled chicken with sweet potato and steamed broccoli',
                        snacks: 'Hard-boiled eggs, carrots with hummus'
                    },
                    'Thursday': {
                        breakfast: 'Greek yogurt parfait with granola and fruit',
                        lunch: 'Quinoa bowl with roasted vegetables and chickpeas',
                        dinner: 'Baked white fish with asparagus and wild rice',
                        snacks: 'Protein bar, handful of mixed nuts'
                    },
                    'Friday': {
                        breakfast: 'Avocado toast with scrambled eggs',
                        lunch: 'Chicken and vegetable soup with whole grain roll',
                        dinner: 'Turkey burgers (no bun) with sweet potato fries and salad',
                        snacks: 'Banana with almond butter, protein shake'
                    },
                    'Saturday': {
                        breakfast: 'Egg white breakfast burrito with vegetables',
                        lunch: 'Salmon poke bowl with brown rice and avocado',
                        dinner: 'Grilled steak with roasted potatoes and grilled zucchini',
                        snacks: 'Greek yogurt, dark chocolate square'
                    },
                    'Sunday': {
                        breakfast: 'Whole grain pancakes with berries and light syrup',
                        lunch: 'Mediterranean salad with grilled halloumi cheese',
                        dinner: 'Roast chicken with vegetables and quinoa',
                        snacks: 'Fruit salad, small handful of trail mix'
                    }
                };
                // Sauvegarder pour maintenir la cohérence
                localStorage.setItem('mealPlans', JSON.stringify(mealPlanData));
            }
            
            // Créer l'affichage du plan nutritionnel
            showMealPlanModal(mealPlanData);
        }
        
        // Fonction pour afficher le plan de repas dans une fenêtre modale
        function showMealPlanModal(mealPlan) {
            // Créer la structure HTML pour la fenêtre modale
            let modalHTML = `
                <div class="meal-plan-modal" style="
                    position: fixed;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    background: rgba(0,0,0,0.8);
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    z-index: 1000;
                ">
                    <div class="meal-plan-modal-content" style="
                        width: 90%;
                        max-width: 800px;
                        max-height: 90vh;
                        background: #1a1a1a;
                        border-radius: 15px;
                        overflow: hidden;
                        box-shadow: 0 10px 30px rgba(0,0,0,0.5);
                        display: flex;
                        flex-direction: column;
                    ">
                        <div class="meal-plan-modal-header" style="
                            background: linear-gradient(135deg, #ff5e13, #ff8c00);
                            padding: 15px 20px;
                            display: flex;
                            justify-content: space-between;
                            align-items: center;
                        ">
                            <h3 style="margin: 0; color: white; font-size: 18px;">
                                <i class="fas fa-utensils" style="margin-right: 10px;"></i>
                                ${userData.language === 'en' ? 'Your Weekly Meal Plan' : 'Votre Plan Alimentaire Hebdomadaire'}
                            </h3>
                            <button class="meal-plan-close-btn" style="
                                background: rgba(0,0,0,0.2);
                                border: none;
                                width: 30px;
                                height: 30px;
                                border-radius: 50%;
                                color: white;
                                display: flex;
                                align-items: center;
                                justify-content: center;
                                cursor: pointer;
                            ">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                        <div class="meal-plan-modal-body" style="
                            padding: 20px;
                            overflow-y: auto;
                            flex: 1;
                        ">
                            <div class="meal-plan-tabs" style="
                                display: flex;
                                overflow-x: auto;
                                margin-bottom: 20px;
                                background: rgba(255,255,255,0.05);
                                border-radius: 10px;
                                padding: 5px;
                            ">
            `;
            
            // Jours de la semaine
            const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
            const dayNames = userData.language === 'en' 
                ? ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
                : ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi', 'Dimanche'];
            
            // Ajouter les onglets pour chaque jour
            days.forEach((day, index) => {
                const isActive = index === 0;
                modalHTML += `
                    <button class="meal-plan-tab ${isActive ? 'active' : ''}" data-day="${day}" style="
                        flex: 1;
                        min-width: 70px;
                        padding: 10px 15px;
                        background: ${isActive ? 'linear-gradient(135deg, #ff5e13, #ff8c00)' : 'transparent'};
                        color: ${isActive ? 'white' : '#aaa'};
                        border: none;
                        border-radius: 5px;
                        cursor: pointer;
                        margin: 0 2px;
                        font-size: 14px;
                    ">
                        ${dayNames[index]}
                    </button>
                `;
            });
            
            modalHTML += `
                            </div>
                            <div class="meal-plan-content">
            `;
            
            // Contenu pour chaque jour
            days.forEach((day, index) => {
                const isVisible = index === 0;
                const dayMeals = mealPlan[day] || {
                    breakfast: userData.language === 'en' ? 'Protein oatmeal with banana and almonds' : 'Flocons d\'avoine protéinés avec banane et amandes',
                    lunch: userData.language === 'en' ? 'Grilled chicken salad with olive oil dressing' : 'Salade de poulet grillé avec vinaigrette à l\'huile d\'olive',
                    dinner: userData.language === 'en' ? 'Baked salmon with quinoa and roasted vegetables' : 'Saumon au four avec quinoa et légumes rôtis',
                    snacks: userData.language === 'en' ? 'Greek yogurt with berries, protein shake' : 'Yaourt grec avec baies, shake protéiné'
                };
                
                modalHTML += `
                    <div class="meal-plan-day-content" id="meal-${day}" style="
                        display: ${isVisible ? 'block' : 'none'};
                        animation: fadeIn 0.3s ease;
                    ">
                        <h4 style="
                            color: #ff8c00;
                            margin-bottom: 20px;
                            padding-bottom: 10px;
                            border-bottom: 1px solid rgba(255,255,255,0.1);
                        ">
                            ${dayNames[index]} ${userData.language === 'en' ? 'Meal Plan' : 'Plan de Repas'}
                        </h4>
                        
                        <!-- Petit Déjeuner -->
                        <div class="meal-item" style="
                            background: rgba(255,255,255,0.05);
                            margin-bottom: 15px;
                            border-radius: 10px;
                            padding: 15px;
                            border-left: 3px solid #ff5e13;
                        ">
                            <div class="meal-header" style="
                                display: flex;
                                align-items: center;
                                margin-bottom: 10px;
                            ">
                                <i class="fas fa-mug-hot" style="
                                    color: #ff5e13;
                                    margin-right: 10px;
                                    font-size: 16px;
                                "></i>
                                <h5 style="
                                    margin: 0;
                                    color: white;
                                    font-size: 16px;
                                ">
                                    ${userData.language === 'en' ? 'Breakfast' : 'Petit-déjeuner'}
                                </h5>
                            </div>
                            <p style="margin: 0; color: #ddd;">
                                ${dayMeals.breakfast}
                            </p>
                        </div>
                        
                        <!-- Déjeuner -->
                        <div class="meal-item" style="
                            background: rgba(255,255,255,0.05);
                            margin-bottom: 15px;
                            border-radius: 10px;
                            padding: 15px;
                            border-left: 3px solid #ff5e13;
                        ">
                            <div class="meal-header" style="
                                display: flex;
                                align-items: center;
                                margin-bottom: 10px;
                            ">
                                <i class="fas fa-hamburger" style="
                                    color: #ff5e13;
                                    margin-right: 10px;
                                    font-size: 16px;
                                "></i>
                                <h5 style="
                                    margin: 0;
                                    color: white;
                                    font-size: 16px;
                                ">
                                    ${userData.language === 'en' ? 'Lunch' : 'Déjeuner'}
                                </h5>
                            </div>
                            <p style="margin: 0; color: #ddd;">
                                ${dayMeals.lunch}
                            </p>
                        </div>
                        
                        <!-- Dîner -->
                        <div class="meal-item" style="
                            background: rgba(255,255,255,0.05);
                            margin-bottom: 15px;
                            border-radius: 10px;
                            padding: 15px;
                            border-left: 3px solid #ff5e13;
                        ">
                            <div class="meal-header" style="
                                display: flex;
                                align-items: center;
                                margin-bottom: 10px;
                            ">
                                <i class="fas fa-utensils" style="
                                    color: #ff5e13;
                                    margin-right: 10px;
                                    font-size: 16px;
                                "></i>
                                <h5 style="
                                    margin: 0;
                                    color: white;
                                    font-size: 16px;
                                ">
                                    ${userData.language === 'en' ? 'Dinner' : 'Dîner'}
                                </h5>
                            </div>
                            <p style="margin: 0; color: #ddd;">
                                ${dayMeals.dinner}
                            </p>
                        </div>
                        
                        <!-- Collations -->
                        <div class="meal-item" style="
                            background: rgba(255,255,255,0.05);
                            border-radius: 10px;
                            padding: 15px;
                            border-left: 3px solid #ff5e13;
                        ">
                            <div class="meal-header" style="
                                display: flex;
                                align-items: center;
                                margin-bottom: 10px;
                            ">
                                <i class="fas fa-apple-alt" style="
                                    color: #ff5e13;
                                    margin-right: 10px;
                                    font-size: 16px;
                                "></i>
                                <h5 style="
                                    margin: 0;
                                    color: white;
                                    font-size: 16px;
                                ">
                                    ${userData.language === 'en' ? 'Snacks' : 'Collations'}
                                </h5>
                            </div>
                            <p style="margin: 0; color: #ddd;">
                                ${dayMeals.snacks}
                            </p>
                        </div>
                    </div>
                `;
            });
            
            modalHTML += `
                            </div>
                        </div>
                        <div class="meal-plan-modal-footer" style="
                            padding: 15px 20px;
                            border-top: 1px solid rgba(255,255,255,0.1);
                            display: flex;
                            justify-content: center;
                        ">
                            <button class="meal-plan-close-btn-footer" style="
                                background: linear-gradient(135deg, #ff5e13, #ff8c00);
                                border: none;
                                color: white;
                                padding: 10px 20px;
                                border-radius: 25px;
                                cursor: pointer;
                                font-size: 14px;
                                display: flex;
                                align-items: center;
                            ">
                                <i class="fas fa-times" style="margin-right: 8px;"></i>
                                ${userData.language === 'en' ? 'Close' : 'Fermer'}
                            </button>
                        </div>
                    </div>
                </div>
            `;
            
            // Ajouter la modale au body
            const modalElement = document.createElement('div');
            modalElement.innerHTML = modalHTML;
            document.body.appendChild(modalElement);
            
            // Ajouter les écouteurs d'événements pour les onglets et les boutons
            setTimeout(() => {
                // Gérer les onglets
                const tabs = document.querySelectorAll('.meal-plan-tab');
                tabs.forEach(tab => {
                    tab.addEventListener('click', function() {
                        // Désactiver tous les onglets et contenu
                        tabs.forEach(t => {
                            t.style.background = 'transparent';
                            t.style.color = '#aaa';
                            t.classList.remove('active');
                        });
                        document.querySelectorAll('.meal-plan-day-content').forEach(content => {
                            content.style.display = 'none';
                        });
                        
                        // Activer l'onglet cliqué et son contenu
                        this.style.background = 'linear-gradient(135deg, #ff5e13, #ff8c00)';
                        this.style.color = 'white';
                        this.classList.add('active');
                        
                        const day = this.getAttribute('data-day');
                        document.getElementById(`meal-${day}`).style.display = 'block';
                    });
                });
                
                // Gérer les boutons de fermeture
                const closeButtons = document.querySelectorAll('.meal-plan-close-btn, .meal-plan-close-btn-footer');
                closeButtons.forEach(button => {
                    button.addEventListener('click', function() {
                        document.body.removeChild(modalElement);
                    });
                });
            }, 100);
        }

        // Fonction pour afficher le calendrier d'entraînement dans une fenêtre modale
        function showWorkoutCalendarModal() {
            // Récupérer les données d'entraînement
            const workoutData = JSON.parse(localStorage.getItem('workoutProgress')) || {};
            
            // Créer la structure HTML pour la fenêtre modale
            let modalHTML = `
                <div class="workout-calendar-modal" style="
                    position: fixed;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    background: rgba(0,0,0,0.8);
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    z-index: 1000;
                ">
                    <div class="workout-calendar-modal-content" style="
                        width: 90%;
                        max-width: 900px;
                        max-height: 90vh;
                        background: #1a1a1a;
                        border-radius: 15px;
                        overflow: hidden;
                        box-shadow: 0 10px 30px rgba(0,0,0,0.5);
                        display: flex;
                        flex-direction: column;
                    ">
                        <div class="workout-calendar-modal-header" style="
                            background: linear-gradient(135deg, #ff5e13, #ff8c00);
                            padding: 15px 20px;
                            display: flex;
                            justify-content: space-between;
                            align-items: center;
                        ">
                            <h3 style="margin: 0; color: white; font-size: 18px;">
                                <i class="fas fa-calendar-alt" style="margin-right: 10px;"></i>
                                ${userData.language === 'en' ? 'Your Weekly Workout Calendar' : 'Votre Calendrier d\'Entraînement Hebdomadaire'}
                            </h3>
                            <button class="workout-calendar-close-btn" style="
                                background: rgba(0,0,0,0.2);
                                border: none;
                                width: 30px;
                                height: 30px;
                                border-radius: 50%;
                                color: white;
                                display: flex;
                                align-items: center;
                                justify-content: center;
                                cursor: pointer;
                            ">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                        <div class="workout-calendar-modal-body" style="
                            padding: 20px;
                            overflow-y: auto;
                            flex: 1;
                        ">
                            <div class="workout-calendar-tabs" style="
                                display: flex;
                                overflow-x: auto;
                                margin-bottom: 20px;
                                background: rgba(255,255,255,0.05);
                                border-radius: 10px;
                                padding: 5px;
                            ">
            `;
            
            // Jours de la semaine
            const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
            const dayNames = userData.language === 'en' 
                ? ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
                : ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi', 'Dimanche'];
            
            // Ajouter les onglets pour chaque jour
            days.forEach((day, index) => {
                const isActive = index === 0;
                modalHTML += `
                    <button class="workout-calendar-tab ${isActive ? 'active' : ''}" data-day="${day}" style="
                        flex: 1;
                        min-width: 70px;
                        padding: 10px 15px;
                        background: ${isActive ? 'linear-gradient(135deg, #ff5e13, #ff8c00)' : 'transparent'};
                        color: ${isActive ? 'white' : '#aaa'};
                        border: none;
                        border-radius: 5px;
                        cursor: pointer;
                        margin: 0 2px;
                        font-size: 14px;
                    ">
                        ${dayNames[index]}
                    </button>
                `;
            });
            
            modalHTML += `
                            </div>
                            <div class="workout-calendar-content">
            `;
            
            // Contenu pour chaque jour
            days.forEach((day, index) => {
                const isVisible = index === 0;
                const exercises = workoutData[day] || [];
                
                // Calculer le pourcentage d'achèvement
                const completed = exercises.filter(ex => ex.completed).length;
                const total = exercises.length;
                const percent = total > 0 ? Math.round((completed / total) * 100) : 0;
                
                modalHTML += `
                    <div class="workout-calendar-day-content" id="workout-${day}" style="
                        display: ${isVisible ? 'block' : 'none'};
                        animation: fadeIn 0.3s ease;
                    ">
                        <div style="
                            display: flex;
                            justify-content: space-between;
                            align-items: center;
                            margin-bottom: 20px;
                            padding-bottom: 10px;
                            border-bottom: 1px solid rgba(255,255,255,0.1);
                        ">
                            <h4 style="
                                color: #ff8c00;
                                margin: 0;
                            ">
                                ${dayNames[index]} ${userData.language === 'en' ? 'Workout' : 'Entraînement'}
                            </h4>
                            <div style="
                                display: flex;
                                align-items: center;
                                gap: 10px;
                            ">
                                <div style="
                                    width: 100px;
                                    height: 8px;
                                    background: rgba(255,255,255,0.1);
                                    border-radius: 4px;
                                    overflow: hidden;
                                ">
                                    <div style="
                                        background: linear-gradient(to right, #ff5e13, #ff8c00);
                                        width: ${percent}%;
                                        height: 100%;
                                    "></div>
                                </div>
                                <div style="
                                    color: #ccc;
                                    font-size: 13px;
                                ">
                                    ${percent}%
                                </div>
                            </div>
                        </div>
                        
                        <div style="
                            margin-top: 15px;
                        ">
                `;
                
                // Ajouter les exercices
                if (exercises.length > 0) {
                    exercises.forEach(exercise => {
                        modalHTML += `
                            <div style="
                                margin-bottom: 15px;
                                background: rgba(255,255,255,0.05);
                                border-radius: 10px;
                                padding: 15px;
                                border-left: 3px solid ${exercise.completed ? '#ff5e13' : 'rgba(255,255,255,0.1)'};
                            ">
                                <div style="
                                    display: flex;
                                    justify-content: space-between;
                                    align-items: center;
                                    margin-bottom: 8px;
                                ">
                                    <div style="
                                        font-weight: 600;
                                        color: ${exercise.completed ? '#ff8c00' : '#ddd'};
                                        font-size: 16px;
                                    ">
                                        ${exercise.name}
                                    </div>
                                    <div style="
                                        color: #aaa;
                                        font-size: 13px;
                                    ">
                                        ${exercise.sets || ''} ${exercise.reps ? 'x ' + exercise.reps : ''}
                                    </div>
                                </div>
                                
                                <div style="
                                    margin-top: 10px;
                                    display: flex;
                                    flex-wrap: wrap;
                                    gap: 5px;
                                ">
                        `;
                        
                        // Ajouter les équipements
                        if (exercise.equipment && exercise.equipment.length > 0) {
                            if (Array.isArray(exercise.equipment)) {
                                exercise.equipment.forEach(eq => {
                                    modalHTML += `
                                        <span style="
                                            font-size: 12px;
                                            padding: 3px 8px;
                                            background: rgba(255,94,19,0.1);
                                            border-radius: 15px;
                                            color: #ff8c00;
                                        ">
                                            ${eq}
                                        </span>
                                    `;
                                });
                            } else {
                                modalHTML += `
                                    <span style="
                                        font-size: 12px;
                                        padding: 3px 8px;
                                        background: rgba(255,94,19,0.1);
                                        border-radius: 15px;
                                        color: #ff8c00;
                                    ">
                                        ${exercise.equipment}
                                    </span>
                                `;
                            }
                        }
                        
                        modalHTML += `
                                </div>
                                
                                <div style="
                                    margin-top: 12px;
                                    font-size: 13px;
                                    color: ${exercise.completed ? '#4CAF50' : '#999'};
                                    display: flex;
                                    align-items: center;
                                ">
                                    <i class="fas ${exercise.completed ? 'fa-check-circle' : 'fa-clock'}" style="margin-right: 5px;"></i>
                                    ${exercise.completed ? 
                                        (userData.language === 'en' ? 'Completed' : 'Terminé') : 
                                        (userData.language === 'en' ? 'Pending' : 'En attente')
                                    }
                                </div>
                            </div>
                        `;
                    });
                } else {
                    modalHTML += `
                        <div style="
                            text-align: center;
                            padding: 30px 20px;
                            color: #aaa;
                            background: rgba(255,255,255,0.05);
                            border-radius: 10px;
                        ">
                            <i class="fas fa-dumbbell" style="
                                font-size: 40px;
                                color: rgba(255,255,255,0.1);
                                margin-bottom: 15px;
                                display: block;
                            "></i>
                            <p>${userData.language === 'en' ? 'Rest day - No exercises scheduled' : 'Jour de repos - Aucun exercice prévu'}</p>
                        </div>
                    `;
                }
                
                modalHTML += `
                        </div>
                    </div>
                `;
            });
            
            modalHTML += `
                            </div>
                        </div>
                        <div class="workout-calendar-modal-footer" style="
                            padding: 15px 20px;
                            border-top: 1px solid rgba(255,255,255,0.1);
                            display: flex;
                            justify-content: space-between;
                        ">
                            <button class="view-meal-plan-btn" style="
                                background: rgba(76, 175, 80, 0.2);
                                border: 1px solid rgba(76, 175, 80, 0.3);
                                color: #4CAF50;
                                padding: 10px 20px;
                                border-radius: 25px;
                                cursor: pointer;
                                font-size: 14px;
                                display: flex;
                                align-items: center;
                            ">
                                <i class="fas fa-utensils" style="margin-right: 8px;"></i>
                                ${userData.language === 'en' ? 'View Meal Plan' : 'Voir Plan Repas'}
                            </button>
                            <button class="workout-calendar-close-btn-footer" style="
                                background: linear-gradient(135deg, #ff5e13, #ff8c00);
                                border: none;
                                color: white;
                                padding: 10px 20px;
                                border-radius: 25px;
                                cursor: pointer;
                                font-size: 14px;
                                display: flex;
                                align-items: center;
                            ">
                                <i class="fas fa-times" style="margin-right: 8px;"></i>
                                ${userData.language === 'en' ? 'Close' : 'Fermer'}
                            </button>
                        </div>
                    </div>
                </div>
            `;
            
            // Ajouter la modale au body
            const modalElement = document.createElement('div');
            modalElement.innerHTML = modalHTML;
            document.body.appendChild(modalElement);
            
            // Ajouter les écouteurs d'événements pour les onglets et les boutons
            setTimeout(() => {
                // Gérer les onglets
                const tabs = document.querySelectorAll('.workout-calendar-tab');
                tabs.forEach(tab => {
                    tab.addEventListener('click', function() {
                        // Désactiver tous les onglets et contenu
                        tabs.forEach(t => {
                            t.style.background = 'transparent';
                            t.style.color = '#aaa';
                            t.classList.remove('active');
                        });
                        document.querySelectorAll('.workout-calendar-day-content').forEach(content => {
                            content.style.display = 'none';
                        });
                        
                        // Activer l'onglet cliqué et son contenu
                        this.style.background = 'linear-gradient(135deg, #ff5e13, #ff8c00)';
                        this.style.color = 'white';
                        this.classList.add('active');
                        
                        const day = this.getAttribute('data-day');
                        document.getElementById(`workout-${day}`).style.display = 'block';
                    });
                });
                
                // Gérer les boutons de fermeture
                const closeButtons = document.querySelectorAll('.workout-calendar-close-btn, .workout-calendar-close-btn-footer');
                closeButtons.forEach(button => {
                    button.addEventListener('click', function() {
                        document.body.removeChild(modalElement);
                    });
                });
                
                // Gérer le bouton pour voir le plan de repas
                const mealPlanButton = document.querySelector('.view-meal-plan-btn');
                if (mealPlanButton) {
                    mealPlanButton.addEventListener('click', function() {
                        // Fermer la modale du calendrier
                        document.body.removeChild(modalElement);
                        
                        // Ouvrir la modale du plan de repas
                        const mealPlan = JSON.parse(localStorage.getItem('mealPlans')) || {};
                        showMealPlanModal(mealPlan);
                    });
                }
            }, 100);
        }
        
        // Fonction pour le widget météo
        function initWeatherWidget() {
            const weatherWidget = document.getElementById('weather-widget');
            if (!weatherWidget) return;
            
            // Clé API pour OpenWeatherMap (remplacer avec votre propre clé)
            const apiKey = '59d9048c3b3d2feb70f1aec101a92235';
            
            // Fonction pour obtenir la localisation de l'utilisateur
            function getUserLocation() {
                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(position => {
                        const lat = position.coords.latitude;
                        const lon = position.coords.longitude;
                        fetchWeatherData(lat, lon);
                    }, error => {
                        console.error("Erreur de géolocalisation:", error);
                        // Localisation par défaut (Paris)
                        fetchWeatherData(48.8566, 2.3522);
                    });
                } else {
                    // Localisation par défaut (Paris)
                    fetchWeatherData(48.8566, 2.3522);
                }
            }
            
            // Fonction pour récupérer les données météo de l'API
            function fetchWeatherData(lat, lon) {
                const weatherUrl = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=${apiKey}&lang=${userData ? userData.language : 'fr'}`;
                
                fetch(weatherUrl)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Erreur réseau');
                        }
                        return response.json();
                    })
                    .then(data => {
                        displayWeatherData(data);
                    })
                    .catch(error => {
                        console.error("Erreur lors de la récupération des données météo:", error);
                        weatherWidget.innerHTML = `
                            <div style="text-align: center; color: #f44336; padding: 15px;">
                                <i class="fas fa-exclamation-triangle" style="margin-right: 8px;"></i>
                                Impossible de charger les données météo
                            </div>
                        `;
                    });
            }
            
            // Fonction pour afficher les données météo
            function displayWeatherData(data) {
                const temp = Math.round(data.main.temp);
                const feels_like = Math.round(data.main.feels_like);
                const description = data.weather[0].description;
                const icon = data.weather[0].icon;
                const city = data.name;
                const humidity = data.main.humidity;
                const wind = Math.round(data.wind.speed * 3.6); // Conversion de m/s en km/h
                
                let weatherHTML = `
                    <div style="display: flex; justify-content: space-between; align-items: center; width: 100%; margin-bottom: 10px;">
                        <div style="font-size: 16px; font-weight: 600; color: white;">
                            ${city}
                        </div>
                        <div style="font-size: 12px; color: #aaa;">
                            ${new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}
                        </div>
                    </div>
                    <div style="display: flex; justify-content: center; align-items: center; margin: 5px 0;">
                        <img src="https://openweathermap.org/img/wn/${icon}@2x.png" alt="${description}" style="width: 60px; height: 60px;">
                        <div style="font-size: 32px; font-weight: 700; color: white; margin-left: 5px;">
                            ${temp}°C
                        </div>
                    </div>
                    <div style="text-align: center; color: #ddd; margin-bottom: 10px; font-weight: 500; text-transform: capitalize;">
                        ${description}
                    </div>
                    <div style="display: flex; justify-content: space-around; width: 100%; margin-top: 10px; border-top: 1px solid rgba(255,255,255,0.1); padding-top: 10px;">
                        <div style="text-align: center; font-size: 12px; color: #ddd;">
                            <i class="fas fa-thermometer-half" style="color: #FF5722; margin-bottom: 5px; font-size: 14px;"></i><br>
                            ${userData && userData.language === 'en' ? 'Feels like' : 'Ressenti'}<br>
                            <span style="font-weight: 600; color: white;">${feels_like}°C</span>
                        </div>
                        <div style="text-align: center; font-size: 12px; color: #ddd;">
                            <i class="fas fa-tint" style="color: #2196F3; margin-bottom: 5px; font-size: 14px;"></i><br>
                            ${userData && userData.language === 'en' ? 'Humidity' : 'Humidité'}<br>
                            <span style="font-weight: 600; color: white;">${humidity}%</span>
                        </div>
                        <div style="text-align: center; font-size: 12px; color: #ddd;">
                            <i class="fas fa-wind" style="color: #90CAF9; margin-bottom: 5px; font-size: 14px;"></i><br>
                            ${userData && userData.language === 'en' ? 'Wind' : 'Vent'}<br>
                            <span style="font-weight: 600; color: white;">${wind} km/h</span>
                        </div>
                    </div>
                    <div style="margin-top: 15px; text-align: center; font-size: 12px; color: #aaa;">
                        <i class="fas fa-running" style="margin-right: 5px;"></i>
                        ${getWorkoutRecommendation(temp, data.weather[0].main, wind)}
                    </div>
                `;
                
                weatherWidget.innerHTML = weatherHTML;
                
                // Ajouter un effet de survol
                weatherWidget.addEventListener('mouseenter', function() {
                    this.style.transform = 'translateY(-5px)';
                    this.style.boxShadow = '0 10px 25px rgba(0,0,0,0.3)';
                });
                
                weatherWidget.addEventListener('mouseleave', function() {
                    this.style.transform = 'translateY(0)';
                    this.style.boxShadow = 'none';
                });
            }
            
            // Fonction pour donner des recommandations d'entraînement en fonction de la météo
            function getWorkoutRecommendation(temp, weatherMain, wind) {
                const lang = userData && userData.language === 'en' ? 'en' : 'fr';
                
                if (weatherMain === 'Rain' || weatherMain === 'Thunderstorm' || weatherMain === 'Drizzle') {
                    return lang === 'en' ? 
                        'Ideal day for indoor training!' : 
                        'Idéal pour un entraînement en salle!';
                } else if (temp > 30) {
                    return lang === 'en' ? 
                        'Hot day! Stay hydrated during workout.' : 
                        'Journée chaude! Restez hydraté pendant l\'entraînement.';
                } else if (temp < 5) {
                    return lang === 'en' ? 
                        'Cold day! Warm up properly before exercising.' : 
                        'Journée froide! Échauffez-vous bien avant l\'exercice.';
                } else if (wind > 30) {
                    return lang === 'en' ? 
                        'Windy conditions. Consider indoor workout.' : 
                        'Conditions venteuses. Envisagez un entraînement en salle.';
                } else if (weatherMain === 'Clear' && temp >= 15 && temp <= 25) {
                    return lang === 'en' ? 
                        'Perfect weather for outdoor workout!' : 
                        'Météo parfaite pour un entraînement en extérieur!';
                } else {
                    return lang === 'en' ? 
                        'Good conditions for any workout!' : 
                        'Bonnes conditions pour tout type d\'entraînement!';
                }
            }
            
            // Initialiser le widget
            getUserLocation();
        }
        
        // Initialiser le widget météo lorsque la page est chargée
        document.addEventListener('DOMContentLoaded', function() {
            initWeatherWidget();
            
            // Mettre à jour la météo toutes les 30 minutes
            setInterval(initWeatherWidget, 30 * 60 * 1000);
        });
    });

    // Code météo direct pour éviter les problèmes d'initialisation
    document.addEventListener('DOMContentLoaded', function() {
        setTimeout(function() {
            const weatherWidget = document.getElementById('weather-widget');
            
            // Utiliser WeatherAPI au lieu d'OpenWeatherMap
            const apiKey = 'f9d2fcf69fd0452f9bb185211232506'; // Clé pour WeatherAPI
            const url = `https://api.weatherapi.com/v1/current.json?key=${apiKey}&q=Tunis&lang=fr`;
            
            fetch(url)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`Erreur HTTP: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log("Données météo reçues:", data);
                    
                    // Structure différente avec WeatherAPI
                    const temp = Math.round(data.current.temp_c);
                    const feels_like = Math.round(data.current.feelslike_c);
                    const description = data.current.condition.text;
                    const icon = data.current.condition.icon;
                    const city = data.location.name;
                    const country = data.location.country;
                    const humidity = data.current.humidity;
                    const wind = Math.round(data.current.wind_kph);
                    
                    let weatherHTML = `
                        <div style="display: flex; justify-content: space-between; align-items: center; width: 100%; margin-bottom: 10px;">
                            <div style="font-size: 16px; font-weight: 600; color: white;">
                                ${city}, Tunisie
                            </div>
                            <div style="font-size: 12px; color: #aaa;">
                                ${new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}
                            </div>
                        </div>
                        <div style="display: flex; justify-content: center; align-items: center; margin: 5px 0;">
                            <img src="${icon}" alt="${description}" style="width: 60px; height: 60px;">
                            <div style="font-size: 32px; font-weight: 700; color: white; margin-left: 5px;">
                                ${temp}°C
                            </div>
                        </div>
                        <div style="text-align: center; color: #ddd; margin-bottom: 10px; font-weight: 500; text-transform: capitalize;">
                            ${description}
                        </div>
                        <div style="display: flex; justify-content: space-around; width: 100%; margin-top: 10px; border-top: 1px solid rgba(255,255,255,0.1); padding-top: 10px;">
                            <div style="text-align: center; font-size: 12px; color: #ddd;">
                                <i class="fas fa-thermometer-half" style="color: #FF5722; margin-bottom: 5px; font-size: 14px;"></i><br>
                                Ressenti<br>
                                <span style="font-weight: 600; color: white;">${feels_like}°C</span>
                            </div>
                            <div style="text-align: center; font-size: 12px; color: #ddd;">
                                <i class="fas fa-tint" style="color: #2196F3; margin-bottom: 5px; font-size: 14px;"></i><br>
                                Humidité<br>
                                <span style="font-weight: 600; color: white;">${humidity}%</span>
                            </div>
                            <div style="text-align: center; font-size: 12px; color: #ddd;">
                                <i class="fas fa-wind" style="color: #90CAF9; margin-bottom: 5px; font-size: 14px;"></i><br>
                                Vent<br>
                                <span style="font-weight: 600; color: white;">${wind} km/h</span>
                            </div>
                        </div>
                    `;
                    
                    weatherWidget.innerHTML = weatherHTML;
                    
                    weatherWidget.addEventListener('mouseenter', function() {
                        this.style.transform = 'translateY(-5px)';
                        this.style.boxShadow = '0 10px 25px rgba(0,0,0,0.3)';
                    });
                    
                    weatherWidget.addEventListener('mouseleave', function() {
                        this.style.transform = 'translateY(0)';
                        this.style.boxShadow = 'none';
                    });
                })
                .catch(error => {
                    console.error('Erreur météo:', error);
                    
                    // Solution alternative - utiliser météo statique
                    showStaticWeather(weatherWidget);
                });
        }, 1000);
    });
    
    // Fonction pour afficher une météo statique en cas d'échec des API
    function showStaticWeather(weatherWidget) {
        const now = new Date();
        const hours = now.getHours();
        let temp, description, icon, conditions;
        
        // Déterminer conditions en fonction de l'heure
        if (hours >= 6 && hours < 12) {
            temp = 22;
            description = "Ensoleillé";
            icon = "fa-sun";
            conditions = "clear";
        } else if (hours >= 12 && hours < 18) {
            temp = 28;
            description = "Ciel dégagé";
            icon = "fa-sun";
            conditions = "clear";
        } else if (hours >= 18 && hours < 21) {
            temp = 24;
            description = "Partiellement nuageux";
            icon = "fa-cloud-sun";
            conditions = "partly-cloudy";
        } else {
            temp = 19;
            description = "Nuit claire";
            icon = "fa-moon";
            conditions = "clear-night";
        }
        
        // Générer HTML avec données statiques
        let weatherHTML = `
            <div style="display: flex; justify-content: space-between; align-items: center; width: 100%; margin-bottom: 10px;">
                <div style="font-size: 16px; font-weight: 600; color: white;">
                    Tunis, Tunisie
                </div>
                <div style="font-size: 12px; color: #aaa;">
                    ${now.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}
                </div>
            </div>
            <div style="display: flex; justify-content: center; align-items: center; margin: 5px 0;">
                <i class="fas ${icon}" style="color: ${conditions === 'clear' ? '#FFD700' : 
                                             conditions === 'partly-cloudy' ? '#B0C4DE' : 
                                             conditions === 'clear-night' ? '#E1E1E1' : '#DDDDDD'}; 
                                  font-size: 40px; margin-right: 10px;"></i>
                <div style="font-size: 32px; font-weight: 700; color: white; margin-left: 5px;">
                    ${temp}°C
                </div>
            </div>
            <div style="text-align: center; color: #ddd; margin-bottom: 10px; font-weight: 500; text-transform: capitalize;">
                ${description}
            </div>
            <div style="display: flex; justify-content: space-around; width: 100%; margin-top: 10px; border-top: 1px solid rgba(255,255,255,0.1); padding-top: 10px;">
                <div style="text-align: center; font-size: 12px; color: #ddd;">
                    <i class="fas fa-thermometer-half" style="color: #FF5722; margin-bottom: 5px; font-size: 14px;"></i><br>
                    Ressenti<br>
                    <span style="font-weight: 600; color: white;">${temp-2}°C</span>
                </div>
                <div style="text-align: center; font-size: 12px; color: #ddd;">
                    <i class="fas fa-tint" style="color: #2196F3; margin-bottom: 5px; font-size: 14px;"></i><br>
                    Humidité<br>
                    <span style="font-weight: 600; color: white;">60%</span>
                </div>
                <div style="text-align: center; font-size: 12px; color: #ddd;">
                    <i class="fas fa-wind" style="color: #90CAF9; margin-bottom: 5px; font-size: 14px;"></i><br>
                    Vent<br>
                    <span style="font-weight: 600; color: white;">12 km/h</span>
                </div>
            </div>
            <div style="font-size: 10px; text-align: center; margin-top: 10px; color: #aaa;">
                Mode hors-ligne
            </div>
        `;
        
        weatherWidget.innerHTML = weatherHTML;
        
        // Ajouter effets de survol
        weatherWidget.addEventListener('mouseenter', function() {
            this.style.transform = 'translateY(-5px)';
            this.style.boxShadow = '0 10px 25px rgba(0,0,0,0.3)';
        });
        
        weatherWidget.addEventListener('mouseleave', function() {
            this.style.transform = 'translateY(0)';
            this.style.boxShadow = 'none';
        });
    }

    // Code météo avec détection de localisation améliorée
    document.addEventListener('DOMContentLoaded', function() {
        setTimeout(function() {
            const weatherWidget = document.getElementById('weather-widget');
            if (!weatherWidget) return;
            
            // Indiquer que la détection de localisation est en cours
            weatherWidget.innerHTML = `
                <div style="text-align: center; color: #ddd; padding: 15px;">
                    <i class="fas fa-map-marker-alt" style="color: #4CAF50; margin-right: 8px; margin-bottom: 10px; font-size: 18px;"></i><br>
                    <div style="margin-bottom: 5px;">Détection de votre localisation...</div>
                    <div class="location-loader" style="
                        width: 40px;
                        height: 5px;
                        background: rgba(255,255,255,0.1);
                        margin: 0 auto;
                        border-radius: 3px;
                        overflow: hidden;
                        position: relative;
                    ">
                        <div style="
                            position: absolute;
                            top: 0;
                            left: 0;
                            height: 100%;
                            width: 30%;
                            background: linear-gradient(to right, #4CAF50, #8BC34A);
                            border-radius: 3px;
                            animation: locationLoading 1.5s infinite ease-in-out;
                        "></div>
                    </div>
                </div>
                <style>
                    @keyframes locationLoading {
                        0% { left: -30%; }
                        100% { left: 100%; }
                    }
                </style>
            `;
            
            // Clé API pour WeatherAPI
            const apiKey = 'f9d2fcf69fd0452f9bb185211232506';
            
            // Fonction pour obtenir la météo en fonction des coordonnées
            function getWeatherByCoords(lat, lon) {
                const url = `https://api.weatherapi.com/v1/current.json?key=${apiKey}&q=${lat},${lon}&lang=fr`;
                
                fetch(url)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`Erreur HTTP: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log("Données météo reçues:", data);
                        displayWeather(data);
                    })
                    .catch(error => {
                        console.error('Erreur météo par coordonnées:', error);
                        // Essayer par IP
                        getLocationByIP();
                    });
            }
            
            // Fonction pour obtenir la localisation par IP
            function getLocationByIP() {
                console.log("Tentative de localisation par IP...");
                // Utiliser ipapi.co pour obtenir l'emplacement approximatif basé sur l'IP
                fetch('https://ipapi.co/json/')
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`Erreur HTTP: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log("Données de localisation IP reçues:", data);
                        if (data.city) {
                            getWeatherByCity(data.city);
                        } else {
                            // Fallback à une ville par défaut
                            getWeatherByCity("Tunis");
                        }
                    })
                    .catch(error => {
                        console.error('Erreur de localisation IP:', error);
                        // Fallback à une ville par défaut
                        getWeatherByCity("Tunis");
                    });
            }
            
            // Fonction pour obtenir la météo en fonction du nom de ville
            function getWeatherByCity(city) {
                console.log(`Récupération de la météo pour: ${city}`);
                const url = `https://api.weatherapi.com/v1/current.json?key=${apiKey}&q=${city}&lang=fr`;
                
                fetch(url)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`Erreur HTTP: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log("Données météo reçues (par ville):", data);
                        displayWeather(data);
                    })
                    .catch(error => {
                        console.error('Erreur météo par ville:', error);
                        // Utiliser la météo statique en dernier recours
                        showStaticWeather();
                    });
            }
            
            // Fonction pour afficher les données météo
            function displayWeather(data) {
                const temp = Math.round(data.current.temp_c);
                const feels_like = Math.round(data.current.feelslike_c);
                const description = data.current.condition.text;
                const icon = data.current.condition.icon;
                const city = data.location.name;
                const region = data.location.region;
                const country = data.location.country;
                const humidity = data.current.humidity;
                const wind = Math.round(data.current.wind_kph);
                
                let locationName = city;
                if (region && region !== city) {
                    locationName += `, ${region}`;
                }
                if (country && country !== region) {
                    locationName += ` (${country})`;
                }
                
                let weatherHTML = `
                    <div style="display: flex; justify-content: space-between; align-items: center; width: 100%; margin-bottom: 10px;">
                        <div style="font-size: 16px; font-weight: 600; color: white; overflow: hidden; text-overflow: ellipsis; max-width: 75%;">
                            <i class="fas fa-map-marker-alt" style="color: #4CAF50; margin-right: 5px; font-size: 14px;"></i>
                            ${locationName}
                        </div>
                        <div style="font-size: 12px; color: #aaa;">
                            ${new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}
                        </div>
                    </div>
                    <div style="display: flex; justify-content: center; align-items: center; margin: 5px 0;">
                        <img src="${icon.replace('http:', 'https:')}" alt="${description}" style="width: 64px; height: 64px; margin-right: 5px;">
                        <div style="font-size: 32px; font-weight: 700; color: white;">
                            ${temp}°C
                        </div>
                    </div>
                    <div style="text-align: center; color: #ddd; margin-bottom: 10px; font-weight: 500; text-transform: capitalize;">
                        ${description}
                    </div>
                    <div style="display: flex; justify-content: space-around; width: 100%; margin-top: 10px; border-top: 1px solid rgba(255,255,255,0.1); padding-top: 10px;">
                        <div style="text-align: center; font-size: 12px; color: #ddd;">
                            <i class="fas fa-thermometer-half" style="color: #FF5722; margin-bottom: 5px; font-size: 14px;"></i><br>
                            Ressenti<br>
                            <span style="font-weight: 600; color: white;">${feels_like}°C</span>
                        </div>
                        <div style="text-align: center; font-size: 12px; color: #ddd;">
                            <i class="fas fa-tint" style="color: #2196F3; margin-bottom: 5px; font-size: 14px;"></i><br>
                            Humidité<br>
                            <span style="font-weight: 600; color: white;">${humidity}%</span>
                        </div>
                        <div style="text-align: center; font-size: 12px; color: #ddd;">
                            <i class="fas fa-wind" style="color: #90CAF9; margin-bottom: 5px; font-size: 14px;"></i><br>
                            Vent<br>
                            <span style="font-weight: 600; color: white;">${wind} km/h</span>
                        </div>
                    </div>
                    <div style="display: flex; justify-content: center; margin-top: 12px;">
                        <button id="refresh-weather" style="
                            background: rgba(255,255,255,0.1); 
                            border: none; 
                            color: #ddd; 
                            padding: 5px 10px; 
                            border-radius: 15px; 
                            font-size: 11px;
                            cursor: pointer;
                            display: flex;
                            align-items: center;
                        ">
                            <i class="fas fa-sync-alt" style="margin-right: 5px;"></i> Actualiser
                        </button>
                    </div>
                `;
                
                weatherWidget.innerHTML = weatherHTML;
                
                // Ajouter animation de survol
                weatherWidget.addEventListener('mouseenter', function() {
                    this.style.transform = 'translateY(-5px)';
                    this.style.boxShadow = '0 10px 25px rgba(0,0,0,0.3)';
                });
                
                weatherWidget.addEventListener('mouseleave', function() {
                    this.style.transform = 'translateY(0)';
                    this.style.boxShadow = 'none';
                });
                
                // Ajouter fonction d'actualisation
                setTimeout(() => {
                    const refreshButton = document.getElementById('refresh-weather');
                    if (refreshButton) {
                        refreshButton.addEventListener('click', function() {
                            detectUserLocation();
                        });
                    }
                }, 100);
            }
            
            // Fonction pour afficher une météo statique si tout échoue
            function showStaticWeather() {
                const now = new Date();
                const hours = now.getHours();
                let temp, description, icon, conditions;
                
                // Déterminer conditions en fonction de l'heure
                if (hours >= 6 && hours < 12) {
                    temp = 22;
                    description = "Ensoleillé";
                    icon = "fa-sun";
                    conditions = "clear";
                } else if (hours >= 12 && hours < 18) {
                    temp = 28;
                    description = "Ciel dégagé";
                    icon = "fa-sun";
                    conditions = "clear";
                } else if (hours >= 18 && hours < 21) {
                    temp = 24;
                    description = "Partiellement nuageux";
                    icon = "fa-cloud-sun";
                    conditions = "partly-cloudy";
                } else {
                    temp = 19;
                    description = "Nuit claire";
                    icon = "fa-moon";
                    conditions = "clear-night";
                }
                
                // Générer HTML avec données statiques
                let weatherHTML = `
                    <div style="display: flex; justify-content: space-between; align-items: center; width: 100%; margin-bottom: 10px;">
                        <div style="font-size: 16px; font-weight: 600; color: white;">
                            <i class="fas fa-exclamation-triangle" style="color: #FFC107; margin-right: 5px; font-size: 14px;"></i>
                            Position non détectée
                        </div>
                        <div style="font-size: 12px; color: #aaa;">
                            ${now.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}
                        </div>
                    </div>
                    <div style="display: flex; justify-content: center; align-items: center; margin: 5px 0;">
                        <i class="fas ${icon}" style="color: ${conditions === 'clear' ? '#FFD700' : 
                                                      conditions === 'partly-cloudy' ? '#B0C4DE' : 
                                                      conditions === 'clear-night' ? '#E1E1E1' : '#DDDDDD'}; 
                                          font-size: 40px; margin-right: 10px;"></i>
                        <div style="font-size: 32px; font-weight: 700; color: white; margin-left: 5px;">
                            ${temp}°C
                        </div>
                    </div>
                    <div style="text-align: center; color: #ddd; margin-bottom: 10px; font-weight: 500; text-transform: capitalize;">
                        ${description}
                    </div>
                    <div style="display: flex; justify-content: space-around; width: 100%; margin-top: 10px; border-top: 1px solid rgba(255,255,255,0.1); padding-top: 10px;">
                        <div style="text-align: center; font-size: 12px; color: #ddd;">
                            <i class="fas fa-thermometer-half" style="color: #FF5722; margin-bottom: 5px; font-size: 14px;"></i><br>
                            Ressenti<br>
                            <span style="font-weight: 600; color: white;">${temp-2}°C</span>
                        </div>
                        <div style="text-align: center; font-size: 12px; color: #ddd;">
                            <i class="fas fa-tint" style="color: #2196F3; margin-bottom: 5px; font-size: 14px;"></i><br>
                            Humidité<br>
                            <span style="font-weight: 600; color: white;">60%</span>
                        </div>
                        <div style="text-align: center; font-size: 12px; color: #ddd;">
                            <i class="fas fa-wind" style="color: #90CAF9; margin-bottom: 5px; font-size: 14px;"></i><br>
                            Vent<br>
                            <span style="font-weight: 600; color: white;">12 km/h</span>
                        </div>
                    </div>
                    <div style="display: flex; justify-content: center; margin-top: 12px;">
                        <button id="try-ip-location" style="
                            background: rgba(255,255,255,0.1); 
                            border: none; 
                            color: #ddd; 
                            padding: 5px 10px; 
                            border-radius: 15px; 
                            font-size: 11px;
                            cursor: pointer;
                            display: flex;
                            align-items: center;
                            margin-right: 5px;
                        ">
                            <i class="fas fa-globe" style="margin-right: 5px;"></i> Localisation IP
                        </button>
                        <button id="retry-location" style="
                            background: rgba(76, 175, 80, 0.2);
                            border: none; 
                            color: #4CAF50; 
                            padding: 5px 10px; 
                            border-radius: 15px; 
                            font-size: 11px;
                            cursor: pointer;
                            display: flex;
                            align-items: center;
                        ">
                            <i class="fas fa-map-marker-alt" style="margin-right: 5px;"></i> GPS
                        </button>
                    </div>
                `;
                
                weatherWidget.innerHTML = weatherHTML;
                
                // Ajouter animation et bouton
                weatherWidget.addEventListener('mouseenter', function() {
                    this.style.transform = 'translateY(-5px)';
                    this.style.boxShadow = '0 10px 25px rgba(0,0,0,0.3)';
                });
                
                weatherWidget.addEventListener('mouseleave', function() {
                    this.style.transform = 'translateY(0)';
                    this.style.boxShadow = 'none';
                });
                
                // Ajouter fonctions pour les boutons
                setTimeout(() => {
                    const retryButton = document.getElementById('retry-location');
                    if (retryButton) {
                        retryButton.addEventListener('click', function() {
                            detectUserLocation();
                        });
                    }
                    
                    const ipButton = document.getElementById('try-ip-location');
                    if (ipButton) {
                        ipButton.addEventListener('click', function() {
                            getLocationByIP();
                        });
                    }
                }, 100);
            }
            
            // Fonction pour détecter la localisation de l'utilisateur
            function detectUserLocation() {
                // Vérifier si nous sommes en HTTPS (requis pour la géolocalisation moderne)
                const isSecure = window.location.protocol === 'https:';
                if (!isSecure) {
                    console.log("Géolocalisation nécessite HTTPS - utilisation de l'IP à la place");
                    getLocationByIP();
                    return;
                }
                
                // Indiquer que la détection est en cours
                weatherWidget.innerHTML = `
                    <div style="text-align: center; color: #ddd; padding: 15px;">
                        <i class="fas fa-map-marker-alt" style="color: #4CAF50; margin-right: 8px; margin-bottom: 10px; font-size: 18px;"></i><br>
                        <div style="margin-bottom: 5px;">Détection de votre localisation...</div>
                        <div class="location-loader" style="
                            width: 40px;
                            height: 5px;
                            background: rgba(255,255,255,0.1);
                            margin: 0 auto;
                            border-radius: 3px;
                            overflow: hidden;
                            position: relative;
                        ">
                            <div style="
                                position: absolute;
                                top: 0;
                                left: 0;
                                height: 100%;
                                width: 30%;
                                background: linear-gradient(to right, #4CAF50, #8BC34A);
                                border-radius: 3px;
                                animation: locationLoading 1.5s infinite ease-in-out;
                            "></div>
                        </div>
                    </div>
                `;
                
                if (navigator.geolocation) {
                    const geoOptions = {
                        enableHighAccuracy: false, // haute précision peut échouer plus souvent
                        timeout: 5000,             // 5 secondes avant timeout
                        maximumAge: 300000         // cache de 5 minutes
                    };
                    
                    navigator.geolocation.getCurrentPosition(
                        // Succès
                        position => {
                            const lat = position.coords.latitude;
                            const lon = position.coords.longitude;
                            console.log(`Localisation GPS détectée: ${lat}, ${lon}`);
                            getWeatherByCoords(lat, lon);
                        },
                        // Erreur
                        error => {
                            console.error("Erreur de géolocalisation:", error);
                            getLocationByIP();
                        },
                        geoOptions
                    );
                } else {
                    console.log("Géolocalisation non supportée");
                    getLocationByIP();
                }
            }
            
            // Démarrer avec la détection IP (plus fiable que GPS)
            getLocationByIP();
        }, 1000);
    });

    function showStaticWeather() {
        const weatherWidget = document.getElementById('weather-widget');
        if (!weatherWidget) return;
        
        // Static fallback content
        weatherWidget.style.background = 'linear-gradient(135deg, rgba(75, 75, 75, 0.8), rgba(50, 50, 50, 0.8))';
        weatherWidget.innerHTML = `
            <div style="display: flex; flex-direction: column; align-items: center; width: 100%;">
                <div style="font-size: 16px; font-weight: bold; color: #fff; margin-bottom: 5px;">
                    <i class="fas fa-exclamation-triangle" style="color: #ffcc00; margin-right: 8px;"></i>
                    Météo indisponible
                </div>
                <div style="font-size: 14px; color: #ddd; text-align: center; margin: 10px 0;">
                    Impossible de charger les données météo actuelles.
                </div>
                <button onclick="getWeatherByLocation()" style="
                    background: rgba(255, 255, 255, 0.2);
                    border: none;
                    color: white;
                    padding: 5px 15px;
                    border-radius: 20px;
                    font-size: 12px;
                    cursor: pointer;
                    transition: all 0.3s;
                    margin-top: 5px;
                ">
                    <i class="fas fa-sync-alt" style="margin-right: 5px;"></i> Réessayer
                </button>
            </div>
        `;
    }

    function getLocationAndWeather() {
        // Afficher un message de chargement
        weatherWidget.innerHTML = `
            <div style="text-align: center; color: #ddd; padding: 15px;">
                <i class="fas fa-spinner fa-spin" style="font-size: 24px; margin-bottom: 10px;"></i>
                <div style="margin-bottom: 5px;">Détection de votre emplacement...</div>
            </div>
        `;
        
        // Utiliser plusieurs sources pour la géolocalisation
        tryCascadingLocationMethods();
    }

    // Fonction pour essayer différentes méthodes de localisation en cascade
    function tryCascadingLocationMethods() {
        console.log("Début de la détection en cascade de l'emplacement");
        
        // Commencer par essayer la méthode la plus fiable: IP API
        tryIPAPI()
            .catch(() => {
                console.log("IP-API a échoué, essai avec alternative");
                return tryIPInfo();
            })
            .catch(() => {
                console.log("IPInfo a échoué, essai avec la géolocalisation du navigateur");
                return tryNavigatorGeolocation();
            })
            .catch(() => {
                console.log("Géolocalisation du navigateur a échoué, utilisation de la position par défaut");
                return getWeatherByCity("Ariana");
            });
    }
    
    // Méthode 1: IPAPI
    function tryIPAPI() {
        return new Promise((resolve, reject) => {
            console.log("Tentative de géolocalisation avec ipapi.co");
            fetch('https://ipapi.co/json/')
                .then(response => {
                    if (!response.ok) throw new Error("Erreur lors de la récupération des données de localisation");
                    return response.json();
                })
                .then(data => {
                    console.log("Données de localisation IPAPI reçues:", data);
                    if (data && data.latitude && data.longitude) {
                        getWeatherByCoords(data.latitude, data.longitude, data.city || "Lieu détecté");
                        resolve(data);
                    } else {
                        throw new Error("Données de localisation incomplètes");
                    }
                })
                .catch(error => {
                    console.error("Erreur avec IPAPI:", error);
                    reject(error);
                });
        });
    }
    
    // Méthode 2: IPInfo
    function tryIPInfo() {
        return new Promise((resolve, reject) => {
            console.log("Tentative de géolocalisation avec ipinfo.io");
            fetch('https://ipinfo.io/json?token=38cce7fcc22d83')
                .then(response => {
                    if (!response.ok) throw new Error("Erreur lors de la récupération des données de localisation");
                    return response.json();
                })
                .then(data => {
                    console.log("Données de localisation IPInfo reçues:", data);
                    if (data && data.loc) {
                        const [lat, lon] = data.loc.split(',');
                        getWeatherByCoords(lat, lon, data.city || "Lieu détecté");
                        resolve(data);
                    } else {
                        throw new Error("Données de localisation incomplètes");
                    }
                })
                .catch(error => {
                    console.error("Erreur avec IPInfo:", error);
                    reject(error);
                });
        });
    }
    
    // Méthode 3: Navigateur Geolocation API
    function tryNavigatorGeolocation() {
        return new Promise((resolve, reject) => {
            console.log("Tentative de géolocalisation avec le navigateur");
            
            if (!navigator.geolocation) {
                console.error("La géolocalisation n'est pas supportée par ce navigateur");
                reject(new Error("Geolocation not supported"));
                return;
            }
            
            navigator.geolocation.getCurrentPosition(
                // Succès
                position => {
                    console.log("Position GPS obtenue:", position);
                    const lat = position.coords.latitude;
                    const lon = position.coords.longitude;
                    
                    // Obtenir le nom de la ville à partir des coordonnées (reverse geocoding)
                    fetch(`https://api.openweathermap.org/geo/1.0/reverse?lat=${lat}&lon=${lon}&limit=1&appid=8c0e1a51d2396d008af39bff66e663c7`)
                        .then(response => response.json())
                        .then(data => {
                            const cityName = data[0]?.name || "Position GPS";
                            getWeatherByCoords(lat, lon, cityName);
                            resolve({lat, lon, city: cityName});
                        })
                        .catch(error => {
                            console.error("Erreur reverse geocoding:", error);
                            // Même si le reverse geocoding échoue, on peut quand même utiliser les coordonnées
                            getWeatherByCoords(lat, lon, "Position GPS");
                            resolve({lat, lon, city: "Position GPS"});
                        });
                },
                // Erreur
                error => {
                    console.error("Erreur de géolocalisation:", error);
                    reject(error);
                },
                // Options
                {
                    enableHighAccuracy: true,
                    timeout: 10000,
                    maximumAge: 0
                }
            );
        });
    }
    
    // Fonction pour obtenir la météo par coordonnées
    function getWeatherByCoords(lat, lon, cityName) {
        console.log(`Récupération de la météo pour: ${cityName} (${lat}, ${lon})`);
        
        // Informer l'utilisateur que la météo est en cours de chargement
        weatherWidget.innerHTML = `
            <div style="text-align: center; color: #ddd; padding: 15px;">
                <i class="fas fa-cloud-sun" style="color: #4CAF50; margin-bottom: 10px; font-size: 18px;"></i><br>
                <div style="margin-bottom: 5px;">Chargement des données météo...</div>
                <div class="location-loader" style="
                    width: 60px;
                    height: 4px;
                    background: rgba(255,255,255,0.1);
                    margin: 0 auto;
                    border-radius: 2px;
                    overflow: hidden;
                    position: relative;
                ">
                    <div style="
                        position: absolute;
                        top: 0;
                        left: 0;
                        height: 100%;
                        width: 30%;
                        background: linear-gradient(to right, #4CAF50, #8BC34A);
                        border-radius: 2px;
                        animation: weatherLoading 1.5s infinite ease-in-out;
                    "></div>
                </div>
                <style>
                    @keyframes weatherLoading {
                        0% { transform: translateX(-100%); }
                        100% { transform: translateX(300%); }
                    }
                </style>
            </div>
        `;
        
        // On utilise d'abord l'API WeatherAPI.com (plus précise et moderne)
        const apiKey = "ce0f1cb12d0242709a395655230710";
        fetch(`https://api.weatherapi.com/v1/current.json?key=${apiKey}&q=${lat},${lon}&lang=fr`)
            .then(response => {
                if (!response.ok) throw new Error(`Erreur HTTP: ${response.status}`);
                return response.json();
            })
            .then(data => {
                console.log("Données météo WeatherAPI reçues:", data);
                displayWeather(data);
            })
            .catch(error => {
                console.error("Erreur WeatherAPI:", error);
                
                // En cas d'échec, utiliser OpenWeatherMap comme fallback
                const owmApiKey = "8c0e1a51d2396d008af39bff66e663c7";
                fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=${owmApiKey}`)
                    .then(response => response.json())
                    .then(weatherData => {
                        console.log("Données météo OpenWeatherMap reçues:", weatherData);
                        displayDetailedWeather(weatherData, cityName);
                    })
                    .catch(err => {
                        console.error("Erreur OpenWeatherMap:", err);
                        displayStaticWeather();
                    });
            });
    }
    
    // Fonction pour obtenir la météo par nom de ville
    function getWeatherByCity(cityName) {
        console.log(`Récupération de la météo pour la ville: ${cityName}`);
        
        // Informer l'utilisateur que la météo est en cours de chargement
        weatherWidget.innerHTML = `
            <div style="text-align: center; color: #ddd; padding: 15px;">
                <i class="fas fa-city" style="color: #2196F3; margin-bottom: 10px; font-size: 18px;"></i><br>
                <div style="margin-bottom: 5px;">Chargement des données météo pour ${cityName}...</div>
                <div class="location-loader" style="
                    width: 60px;
                    height: 4px;
                    background: rgba(255,255,255,0.1);
                    margin: 0 auto;
                    border-radius: 2px;
                    overflow: hidden;
                    position: relative;
                ">
                    <div style="
                        position: absolute;
                        top: 0;
                        left: 0;
                        height: 100%;
                        width: 30%;
                        background: linear-gradient(to right, #2196F3, #03A9F4);
                        border-radius: 2px;
                        animation: weatherLoading 1.5s infinite ease-in-out;
                    "></div>
                </div>
                <style>
                    @keyframes weatherLoading {
                        0% { transform: translateX(-100%); }
                        100% { transform: translateX(300%); }
                    }
                </style>
            </div>
        `;
        
        // On utilise d'abord l'API WeatherAPI.com
        const apiKey = "ce0f1cb12d0242709a395655230710";
        fetch(`https://api.weatherapi.com/v1/current.json?key=${apiKey}&q=${encodeURIComponent(cityName)}&lang=fr`)
            .then(response => {
                if (!response.ok) throw new Error(`Erreur HTTP: ${response.status}`);
                return response.json();
            })
            .then(data => {
                console.log("Données météo WeatherAPI reçues pour " + cityName + ":", data);
                displayWeather(data);
            })
            .catch(error => {
                console.error("Erreur WeatherAPI pour " + cityName + ":", error);
                
                // En cas d'échec, utiliser OpenWeatherMap comme fallback
                const owmApiKey = "8c0e1a51d2396d008af39bff66e663c7";
                fetch(`https://api.openweathermap.org/data/2.5/weather?q=${encodeURIComponent(cityName)}&units=metric&appid=${owmApiKey}`)
                    .then(response => response.json())
                    .then(weatherData => {
                        console.log("Données météo OpenWeatherMap reçues pour " + cityName + ":", weatherData);
                        displayDetailedWeather(weatherData, cityName);
                    })
                    .catch(err => {
                        console.error("Erreur OpenWeatherMap pour " + cityName + ":", err);
                        displayStaticWeather();
                    });
            });
    }

    // Définition de la fonction tryMultipleLocationServices
    function tryMultipleLocationServices() {
        console.log("Utilisation directe de la météo pour Ariana");
        // Afficher d'abord les données en cache pendant le chargement
        displayArianaMeteoCached();
        
        // Puis tenter de récupérer les données en temps réel
        fetchArianaMeteoDirect().catch(error => {
            console.error("Impossible de récupérer les données en temps réel:", error);
            // Les données en cache sont déjà affichées, donc on ne fait rien de plus
        });
    }

    // Fonction pour récupérer la météo pour Ariana directement
    function fetchArianaMeteoDirect() {
        return new Promise((resolve, reject) => {
            console.log("Récupération directe des données météo pour Ariana");
            
            // Ajouter une animation de transition
            weatherWidget.classList.add('loading');
            weatherWidget.style.opacity = '0.8';
            
            // Ajouter une classe CSS pour l'animation
            if (!document.getElementById('weather-animations')) {
                const styleEl = document.createElement('style');
                styleEl.id = 'weather-animations';
                styleEl.textContent = `
                    @keyframes weatherPulse {
                        0% { opacity: 1; }
                        50% { opacity: 0.7; }
                        100% { opacity: 1; }
                    }
                    
                    @keyframes weatherLoading {
                        0% { transform: translateX(-100%); }
                        100% { transform: translateX(100%); }
                    }
                    
                    @keyframes weatherFadeIn {
                        0% { opacity: 0; transform: translateY(10px); }
                        100% { opacity: 1; transform: translateY(0); }
                    }
                    
                    .weather-widget.loading {
                        position: relative;
                        animation: weatherPulse 1.5s infinite;
                    }
                    
                    .weather-widget.loading::after {
                        content: '';
                        position: absolute;
                        top: 0;
                        left: 0;
                        width: 100%;
                        height: 2px;
                        background: linear-gradient(90deg, transparent, #ff5e13, transparent);
                        animation: weatherLoading 1.5s infinite linear;
                    }
                `;
                document.head.appendChild(styleEl);
            }
            
            // Utiliser deux API en parallèle pour avoir la meilleure chance de succès
            const apiKey1 = "ce0f1cb12d0242709a395655230710"; // WeatherAPI.com
            const apiKey2 = "8c0e1a51d2396d008af39bff66e663c7"; // OpenWeatherMap
            
            const request1 = fetch(`https://api.weatherapi.com/v1/current.json?key=${apiKey1}&q=Ariana,Tunisia&lang=fr`)
                .then(response => {
                    if (!response.ok) throw new Error(`Erreur HTTP WeatherAPI: ${response.status}`);
                    return response.json();
                });
            
            const request2 = fetch(`https://api.openweathermap.org/data/2.5/weather?q=Ariana,tn&units=metric&appid=${apiKey2}&lang=fr`)
                .then(response => {
                    if (!response.ok) throw new Error(`Erreur HTTP OpenWeatherMap: ${response.status}`);
                    return response.json();
                });
            
            // Utiliser la première API qui répond
            Promise.race([request1, request2])
                .then(data => {
                    console.log("Données météo reçues pour Ariana:", data);
                    
                    // Vérifier le format des données pour déterminer quelle API a répondu
                    if (data.current) {
                        // Format WeatherAPI
                        weatherWidget.classList.remove('loading');
                        weatherWidget.style.opacity = '1';
                        displayRealTimeWeather(data);
                    } else if (data.main) {
                        // Format OpenWeatherMap, conversion nécessaire
                        const convertedData = {
                            location: {
                                name: "Ariana",
                                country: "Tunisie",
                                region: "",
                                lat: data.coord.lat,
                                lon: data.coord.lon,
                                localtime_epoch: Math.floor(Date.now() / 1000)
                            },
                            current: {
                                temp_c: data.main.temp,
                                feelslike_c: data.main.feels_like,
                                humidity: data.main.humidity,
                                wind_kph: data.wind.speed * 3.6, // conversion m/s en km/h
                                condition: {
                                    text: data.weather[0].description,
                                    icon: `https://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`
                                },
                                is_day: data.weather[0].icon.includes('d') ? 1 : 0,
                                last_updated_epoch: Math.floor(Date.now() / 1000)
                            }
                        };
                        
                        weatherWidget.classList.remove('loading');
                        weatherWidget.style.opacity = '1';
                        displayRealTimeWeather(convertedData);
                    }
                    
                    resolve(data);
                })
                .catch(error => {
                    console.error("Erreur lors de la récupération des données météo:", error);
                    
                    // Afficher une notification d'erreur mais garder les données en cache
                    const notification = document.createElement('div');
                    notification.style.cssText = `
                        position: fixed;
                        bottom: 20px;
                        right: 20px;
                        background: rgba(255, 82, 82, 0.9);
                        color: white;
                        padding: 10px 15px;
                        border-radius: 5px;
                        font-size: 14px;
                        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
                        z-index: 9999;
                        animation: fadeInUp 0.3s forwards;
                    `;
                    
                    notification.innerHTML = `
                        <div style="display: flex; align-items: center;">
                            <i class="fas fa-exclamation-circle" style="margin-right: 10px;"></i>
                            <div>
                                <div style="font-weight: 600; margin-bottom: 3px;">Erreur de connexion</div>
                                <div style="font-size: 12px;">Affichage des données en cache</div>
                            </div>
                        </div>
                    `;
                    
                    document.body.appendChild(notification);
                    
                    setTimeout(() => {
                        notification.style.animation = 'fadeOutDown 0.3s forwards';
                        setTimeout(() => {
                            document.body.removeChild(notification);
                        }, 300);
                    }, 3000);
                    
                    weatherWidget.classList.remove('loading');
                    weatherWidget.style.opacity = '1';
                    
                    reject(error);
                });
            
            // Ajouter des styles CSS d'animation pour la notification
            if (!document.getElementById('notification-animations')) {
                const notifStyles = document.createElement('style');
                notifStyles.id = 'notification-animations';
                notifStyles.textContent = `
                    @keyframes fadeInUp {
                        from {
                            opacity: 0;
                            transform: translateY(20px);
                        }
                        to {
                            opacity: 1;
                            transform: translateY(0);
                        }
                    }
                    
                    @keyframes fadeOutDown {
                        from {
                            opacity: 1;
                            transform: translateY(0);
                        }
                        to {
                            opacity: 0;
                            transform: translateY(20px);
                        }
                    }
                `;
                document.head.appendChild(notifStyles);
            }
        });
    }
</script>

<!-- Weather Widget JavaScript -->
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const weatherWidget = document.getElementById('weather-widget');
        
        if (!weatherWidget) return;
        
        // Afficher un placeholder pendant le chargement
        weatherWidget.innerHTML = `
            <div style="display: flex; flex-direction: column; align-items: center; width: 100%; padding: 15px;">
                <div style="display: flex; align-items: center; justify-content: center; margin-bottom: 10px;">
                    <i class="fas fa-spinner fa-spin" style="color: #ff5e13; font-size: 24px;"></i>
                </div>
                <div style="color: #ddd; font-size: 14px; text-align: center;">
                    Détection de votre position...
                </div>
            </div>
        `;

        // Essayer plusieurs services de localisation en cascade
        tryMultipleLocationServices();

        // Fonction pour afficher la météo statique pour Ariana
        function displayArianaMeteoCached() {
            const now = new Date();
            const hours = now.getHours();
            let temp, condition, feelsLike, humidity, windSpeed;
            
            // Données statiques en fonction de l'heure
            if (hours >= 5 && hours < 12) {
                temp = 22;
                condition = "Ensoleillé";
                feelsLike = 21;
                humidity = 65;
                windSpeed = 8;
                weatherIcon = '<i class="fas fa-sun" style="color: #FFD700; font-size: 40px;"></i>';
            } else if (hours >= 12 && hours < 18) {
                temp = 28;
                condition = "Ciel dégagé";
                feelsLike = 30;
                humidity = 55;
                windSpeed = 10;
                weatherIcon = '<i class="fas fa-sun" style="color: #FFD700; font-size: 40px;"></i>';
            } else if (hours >= 18 && hours < 22) {
                temp = 24;
                condition = "Partiellement nuageux";
                feelsLike = 23;
                humidity = 70;
                windSpeed = 12;
                weatherIcon = '<i class="fas fa-cloud-sun" style="color: #B0C4DE; font-size: 40px;"></i>';
            } else {
                temp = 19;
                condition = "Nuit claire";
                feelsLike = 18;
                humidity = 75;
                windSpeed = 7;
                weatherIcon = '<i class="fas fa-moon" style="color: #E1E1E1; font-size: 40px;"></i>';
            }
            
            // HTML pour l'affichage statique
            weatherWidget.innerHTML = `
                <div style="display: flex; justify-content: space-between; align-items: center; width: 100%; margin-bottom: 10px; padding: 0 10px;">
                    <div style="font-size: 14px; font-weight: 600; color: white;">
                        <i class="fas fa-map-marker-alt" style="color: #4CAF50; margin-right: 5px;"></i>
                        Ariana
                    </div>
                    <div style="font-size: 12px; color: #aaa;">
                        ${now.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}
                    </div>
                </div>
                
                <div style="display: flex; justify-content: center; align-items: center; width: 100%; margin: 10px 0;">
                    ${weatherIcon}
                    <div style="font-size: 32px; font-weight: 700; color: white; margin-left: 15px;">
                        ${temp}°C
                    </div>
                </div>
                
                <div style="text-align: center; color: #ddd; margin-bottom: 15px; font-weight: 500;">
                    ${condition}
                </div>
                
                <div style="display: flex; justify-content: space-between; width: 100%; margin-top: 10px; border-top: 1px solid rgba(255,255,255,0.1); padding-top: 10px;">
                    <div style="text-align: center; flex: 1;">
                        <i class="fas fa-thermometer-half" style="color: #FF5722; font-size: 14px;"></i>
                        <div style="font-size: 10px; color: #aaa; margin-top: 4px;">Ressenti</div>
                        <div style="font-weight: 600; color: white; font-size: 14px;">${feelsLike}°C</div>
                    </div>
                    
                    <div style="text-align: center; flex: 1;">
                        <i class="fas fa-tint" style="color: #2196F3; font-size: 14px;"></i>
                        <div style="font-size: 10px; color: #aaa; margin-top: 4px;">Humidité</div>
                        <div style="font-weight: 600; color: white; font-size: 14px;">${humidity}%</div>
                    </div>
                    
                    <div style="text-align: center; flex: 1;">
                        <i class="fas fa-wind" style="color: #90CAF9; font-size: 14px;"></i>
                        <div style="font-size: 10px; color: #aaa; margin-top: 4px;">Vent</div>
                        <div style="font-weight: 600; color: white; font-size: 14px;">${windSpeed} km/h</div>
                    </div>
                </div>
                
                <div style="display: flex; justify-content: center; margin-top: 15px;">
                    <button id="refresh-weather-btn" style="
                        background: rgba(255,255,255,0.2);
                        border: none;
                        border-radius: 15px;
                        color: #ddd;
                        padding: 5px 15px;
                        font-size: 12px;
                        cursor: pointer;
                        display: flex;
                        align-items: center;
                    ">
                        <i class="fas fa-sync-alt" style="margin-right: 5px;"></i> Actualiser
                    </button>
                </div>
            `;
            
            // Ajouter l'écouteur d'événement pour le bouton d'actualisation
            setTimeout(function() {
                const refreshBtn = document.getElementById('refresh-weather-btn');
                if (refreshBtn) {
                    refreshBtn.addEventListener('click', function() {
                        this.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Chargement...';
                        this.disabled = true;
                        fetchArianaMeteoDirect().finally(() => {
                            this.innerHTML = '<i class="fas fa-sync-alt"></i> Actualiser';
                            this.disabled = false;
                        });
                    });
                }
            }, 100);
        }
        
        // Fonction pour récupérer la météo pour Ariana directement
        function fetchArianaMeteoDirect() {
            return new Promise((resolve, reject) => {
                console.log("Récupération directe des données météo pour Ariana");
                
                // Ajouter une animation de transition
                weatherWidget.classList.add('loading');
                weatherWidget.style.opacity = '0.8';
                
                // Ajouter une classe CSS pour l'animation
                if (!document.getElementById('weather-animations')) {
                    const styleEl = document.createElement('style');
                    styleEl.id = 'weather-animations';
                    styleEl.textContent = `
                        @keyframes weatherPulse {
                            0% { opacity: 1; }
                            50% { opacity: 0.7; }
                            100% { opacity: 1; }
                        }
                        
                        @keyframes weatherLoading {
                            0% { transform: translateX(-100%); }
                            100% { transform: translateX(100%); }
                        }
                        
                        @keyframes weatherFadeIn {
                            0% { opacity: 0; transform: translateY(10px); }
                            100% { opacity: 1; transform: translateY(0); }
                        }
                        
                        .weather-widget.loading {
                            position: relative;
                            animation: weatherPulse 1.5s infinite;
                        }
                        
                        .weather-widget.loading::after {
                            content: '';
                            position: absolute;
                            top: 0;
                            left: 0;
                            width: 100%;
                            height: 2px;
                            background: linear-gradient(90deg, transparent, #ff5e13, transparent);
                            animation: weatherLoading 1.5s infinite linear;
                        }
                    `;
                    document.head.appendChild(styleEl);
                }
                
                // Utiliser deux API en parallèle pour avoir la meilleure chance de succès
                const apiKey1 = "ce0f1cb12d0242709a395655230710"; // WeatherAPI.com
                const apiKey2 = "8c0e1a51d2396d008af39bff66e663c7"; // OpenWeatherMap
                
                const request1 = fetch(`https://api.weatherapi.com/v1/current.json?key=${apiKey1}&q=Ariana,Tunisia&lang=fr`)
                    .then(response => {
                        if (!response.ok) throw new Error(`Erreur HTTP WeatherAPI: ${response.status}`);
                        return response.json();
                    });
                
                const request2 = fetch(`https://api.openweathermap.org/data/2.5/weather?q=Ariana,tn&units=metric&appid=${apiKey2}&lang=fr`)
                    .then(response => {
                        if (!response.ok) throw new Error(`Erreur HTTP OpenWeatherMap: ${response.status}`);
                        return response.json();
                    });
                
                // Utiliser la première API qui répond
                Promise.race([request1, request2])
                    .then(data => {
                        console.log("Données météo reçues pour Ariana:", data);
                        
                        // Vérifier le format des données pour déterminer quelle API a répondu
                        if (data.current) {
                            // Format WeatherAPI
                            weatherWidget.classList.remove('loading');
                            weatherWidget.style.opacity = '1';
                            displayRealTimeWeather(data);
                        } else if (data.main) {
                            // Format OpenWeatherMap, conversion nécessaire
                            const convertedData = {
                                location: {
                                    name: "Ariana",
                                    country: "Tunisie",
                                    region: "",
                                    lat: data.coord.lat,
                                    lon: data.coord.lon,
                                    localtime_epoch: Math.floor(Date.now() / 1000)
                                },
                                current: {
                                    temp_c: data.main.temp,
                                    feelslike_c: data.main.feels_like,
                                    humidity: data.main.humidity,
                                    wind_kph: data.wind.speed * 3.6, // conversion m/s en km/h
                                    condition: {
                                        text: data.weather[0].description,
                                        icon: `https://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`
                                    },
                                    is_day: data.weather[0].icon.includes('d') ? 1 : 0,
                                    last_updated_epoch: Math.floor(Date.now() / 1000)
                                }
                            };
                            
                            weatherWidget.classList.remove('loading');
                            weatherWidget.style.opacity = '1';
                            displayRealTimeWeather(convertedData);
                        }
                        
                        resolve(data);
                    })
                    .catch(error => {
                        console.error("Erreur lors de la récupération des données météo:", error);
                        
                        // Afficher une notification d'erreur mais garder les données en cache
                        const notification = document.createElement('div');
                        notification.style.cssText = `
                            position: fixed;
                            bottom: 20px;
                            right: 20px;
                            background: rgba(255, 82, 82, 0.9);
                            color: white;
                            padding: 10px 15px;
                            border-radius: 5px;
                            font-size: 14px;
                            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
                            z-index: 9999;
                            animation: fadeInUp 0.3s forwards;
                        `;
                        
                        notification.innerHTML = `
                            <div style="display: flex; align-items: center;">
                                <i class="fas fa-exclamation-circle" style="margin-right: 10px;"></i>
                                <div>
                                    <div style="font-weight: 600; margin-bottom: 3px;">Erreur de connexion</div>
                                    <div style="font-size: 12px;">Affichage des données en cache</div>
                                </div>
                            </div>
                        `;
                        
                        document.body.appendChild(notification);
                        
                        setTimeout(() => {
                            notification.style.animation = 'fadeOutDown 0.3s forwards';
                            setTimeout(() => {
                                document.body.removeChild(notification);
                            }, 300);
                        }, 3000);
                        
                        weatherWidget.classList.remove('loading');
                        weatherWidget.style.opacity = '1';
                        
                        reject(error);
                    });
                
                // Ajouter des styles CSS d'animation pour la notification
                if (!document.getElementById('notification-animations')) {
                    const notifStyles = document.createElement('style');
                    notifStyles.id = 'notification-animations';
                    notifStyles.textContent = `
                        @keyframes fadeInUp {
                            from {
                                opacity: 0;
                                transform: translateY(20px);
                            }
                            to {
                                opacity: 1;
                                transform: translateY(0);
                            }
                        }
                        
                        @keyframes fadeOutDown {
                            from {
                                opacity: 1;
                                transform: translateY(0);
                            }
                            to {
                                opacity: 0;
                                transform: translateY(20px);
                            }
                        }
                    `;
                    document.head.appendChild(notifStyles);
                }
            });
        }
        
        // Fonction pour afficher la météo en temps réel
        function displayRealTimeWeather(data) {
            const { location, current } = data;
            const cityName = "Ariana"; // On force Ariana comme nom de ville
            const temp = Math.round(current.temp_c);
            const condition = current.condition.text;
            const iconUrl = current.condition.icon.replace('http:', 'https:');
            const feelsLike = Math.round(current.feelslike_c);
            const humidity = current.humidity;
            const windSpeed = Math.round(current.wind_kph);
            const lastUpdated = new Date(current.last_updated_epoch * 1000).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
            
            weatherWidget.innerHTML = `
                <div style="display: flex; justify-content: space-between; align-items: center; width: 100%; margin-bottom: 10px; padding: 0 10px;">
                    <div style="font-size: 14px; font-weight: 600; color: white;">
                        <i class="fas fa-map-marker-alt" style="color: #4CAF50; margin-right: 5px;"></i>
                        ${cityName}
                    </div>
                    <div style="font-size: 12px; color: #aaa;">
                        ${lastUpdated}
                    </div>
                </div>
                
                <div style="display: flex; justify-content: center; align-items: center; width: 100%; margin: 10px 0;">
                    <img src="${iconUrl}" alt="${condition}" style="width: 64px; height: 64px;">
                    <div style="font-size: 32px; font-weight: 700; color: white; margin-left: 15px;">
                        ${temp}°C
                    </div>
                </div>
                
                <div style="text-align: center; color: #ddd; margin-bottom: 15px; font-weight: 500;">
                    ${condition}
                </div>
                
                <div style="display: flex; justify-content: space-between; width: 100%; margin-top: 10px; border-top: 1px solid rgba(255,255,255,0.1); padding-top: 10px;">
                    <div style="text-align: center; flex: 1;">
                        <i class="fas fa-thermometer-half" style="color: #FF5722; font-size: 14px;"></i>
                        <div style="font-size: 10px; color: #aaa; margin-top: 4px;">Ressenti</div>
                        <div style="font-weight: 600; color: white; font-size: 14px;">${feelsLike}°C</div>
                    </div>
                    
                    <div style="text-align: center; flex: 1;">
                        <i class="fas fa-tint" style="color: #2196F3; font-size: 14px;"></i>
                        <div style="font-size: 10px; color: #aaa; margin-top: 4px;">Humidité</div>
                        <div style="font-weight: 600; color: white; font-size: 14px;">${humidity}%</div>
                    </div>
                    
                    <div style="text-align: center; flex: 1;">
                        <i class="fas fa-wind" style="color: #90CAF9; font-size: 14px;"></i>
                        <div style="font-size: 10px; color: #aaa; margin-top: 4px;">Vent</div>
                        <div style="font-weight: 600; color: white; font-size: 14px;">${windSpeed} km/h</div>
                    </div>
                </div>
                
                <div style="display: flex; justify-content: center; margin-top: 15px;">
                    <button id="refresh-weather-btn" style="
                        background: rgba(255,255,255,0.2);
                        border: none;
                        border-radius: 15px;
                        color: #ddd;
                        padding: 5px 15px;
                        font-size: 12px;
                        cursor: pointer;
                        display: flex;
                        align-items: center;
                    ">
                        <i class="fas fa-sync-alt" style="margin-right: 5px;"></i> Actualiser
                    </button>
                </div>
            `;
            
            // Ajouter l'écouteur d'événement pour le bouton d'actualisation
            setTimeout(function() {
                const refreshBtn = document.getElementById('refresh-weather-btn');
                if (refreshBtn) {
                    refreshBtn.addEventListener('click', function() {
                        this.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Chargement...';
                        this.disabled = true;
                        fetchArianaMeteoDirect().finally(() => {
                            this.innerHTML = '<i class="fas fa-sync-alt"></i> Actualiser';
                            this.disabled = false;
                        });
                    });
                }
            }, 100);
        }
    });
</script>

<!-- Widget d'exercices physiques -->
<div class="exercise-widget" id="exercise-widget" style="
    background: linear-gradient(145deg, rgba(22, 28, 45, 0.92), rgba(38, 50, 80, 0.96));
    border-radius: 20px;
    padding: 25px;
    margin: 40px auto;
    max-width: 850px;
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.08);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.4), 0 0 0 1px rgba(255, 255, 255, 0.03) inset;
    color: white;
    transition: all 0.4s cubic-bezier(0.165, 0.84, 0.44, 1);
    position: relative;
    overflow: hidden;
">
    <!-- Éléments de design d'arrière-plan -->
    <div style="
        position: absolute;
        top: -50px;
        right: -50px;
        width: 200px;
        height: 200px;
        background: radial-gradient(circle, rgba(255, 94, 19, 0.1) 0%, transparent 70%);
        border-radius: 50%;
        z-index: 0;
    "></div>
    <div style="
        position: absolute;
        bottom: -30px;
        left: -30px;
        width: 150px;
        height: 150px;
        background: radial-gradient(circle, rgba(76, 175, 80, 0.08) 0%, transparent 70%);
        border-radius: 50%;
        z-index: 0;
    "></div>

    <!-- En-tête du widget -->
    <div style="
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 25px;
        position: relative;
        z-index: 1;
        flex-wrap: wrap;
        gap: 15px;
    ">
        <h3 style="
            font-size: 24px;
            margin: 0;
            font-weight: 700;
            display: flex;
            align-items: center;
            background: linear-gradient(90deg, #fff, #e0e0e0);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            text-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        ">
            <div style="
                background: linear-gradient(135deg, #ff5e13, #ff7e47);
                width: 36px;
                height: 36px;
                border-radius: 12px;
                display: flex;
                align-items: center;
                justify-content: center;
                margin-right: 12px;
                box-shadow: 0 4px 15px rgba(255, 94, 19, 0.3);
            ">
                <i class="fas fa-dumbbell" style="color: white; font-size: 18px;"></i>
            </div>
            Exercice du jour
        </h3>
        
        <div style="
            display: flex;
            gap: 12px;
            align-items: center;
        ">
            <select id="muscle-filter" style="
                background: rgba(255, 255, 255, 0.07);
                border: 1px solid rgba(255, 255, 255, 0.12);
                border-radius: 12px;
                color: white;
                padding: 10px 15px;
                font-size: 14px;
                cursor: pointer;
                transition: all 0.3s ease;
                appearance: none;
                -webkit-appearance: none;
                background-image: url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"white\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M6 9l6 6 6-6\"/></svg>');
                background-repeat: no-repeat;
                background-position: right 15px center;
                padding-right: 40px;
                font-weight: 500;
                box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            ">
                <option value="all">Tous les muscles</option>
                <option value="1">Biceps</option>
                <option value="2">Épaules</option>
                <option value="3">Poitrine</option>
                <option value="4">Triceps</option>
                <option value="5">Abdominaux</option>
                <option value="6">Dos</option>
                <option value="7">Quadriceps</option>
                <option value="8">Ischio-jambiers</option>
                <option value="9">Mollets</option>
                <option value="10">Fessiers</option>
            </select>
            
            <button id="new-exercise-btn" style="
                background: linear-gradient(135deg, #ff5e13, #ff7e47);
                border: none;
                border-radius: 12px;
                color: white;
                padding: 12px 20px;
                font-size: 14px;
                font-weight: 600;
                cursor: pointer;
                display: flex;
                align-items: center;
                box-shadow: 0 4px 15px rgba(255, 94, 19, 0.3);
                transition: all 0.3s ease;
                position: relative;
                overflow: hidden;
                z-index: 1;
            ">
                <i class="fas fa-sync-alt" style="margin-right: 8px;"></i> Nouvel exercice
                <span style="
                    position: absolute;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    background: linear-gradient(90deg, rgba(255, 255, 255, 0), rgba(255, 255, 255, 0.1), rgba(255, 255, 255, 0));
                    transform: translateX(-100%);
                    z-index: -1;
                    transition: transform 0.5s ease;
                " id="button-shine"></span>
            </button>
        </div>
    </div>
    
    <!-- Contenu principal -->
    <div id="exercise-content" style="
        background: rgba(0, 0, 0, 0.25);
        border-radius: 16px;
        padding: 25px;
        margin-bottom: 20px;
        min-height: 250px;
        display: flex;
        flex-direction: column;
        gap: 25px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.05);
        position: relative;
        z-index: 1;
        backdrop-filter: blur(5px);
    ">
        <div style="display: flex; align-items: center; justify-content: center; height: 250px;">
            <div style="text-align: center;">
                <div style="
                    width: 60px;
                    height: 60px;
                    border-radius: 50%;
                    background: rgba(255, 94, 19, 0.1);
                    margin: 0 auto 20px;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                ">
                    <i class="fas fa-spinner fa-spin" style="font-size: 30px; color: #ff5e13;"></i>
                </div>
                <p style="font-size: 16px; color: rgba(255, 255, 255, 0.8);">Chargement de l'exercice...</p>
            </div>
        </div>
    </div>
    
    <!-- Footer -->
    <div style="
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-size: 12px;
        color: rgba(255, 255, 255, 0.4);
        position: relative;
        z-index: 1;
    ">
        <div>
            <i class="fas fa-info-circle" style="margin-right: 4px;"></i>
            Des nouveaux exercices chaque jour pour progresser
        </div>
        <div>
            Powered by <span style="color: rgba(255, 255, 255, 0.6); font-weight: 500;">Wger API</span>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const exerciseWidget = document.getElementById('exercise-widget');
        const exerciseContent = document.getElementById('exercise-content');
        const newExerciseBtn = document.getElementById('new-exercise-btn');
        const muscleFilter = document.getElementById('muscle-filter');
        
        // Collection d'exercices en français (fallback en cas d'échec API)
        const fallbackExercises = [
            {
                name: "Pompes",
                description: "Allongez-vous face contre terre, les mains écartées à la largeur des épaules. Poussez avec vos bras pour soulever votre corps, en gardant votre dos droit. Descendez jusqu'à ce que votre poitrine soit près du sol, puis remontez.",
                muscles: ["Pectoraux", "Triceps", "Épaules"],
                image: "https://www.fitnessfactory.com/images/stretches/pushup.jpg",
                repetitions: "3 séries de 10-15 répétitions"
            },
            {
                name: "Squats",
                description: "Tenez-vous debout, les pieds écartés à la largeur des épaules. Pliez les genoux comme si vous vous asseyiez sur une chaise, en maintenant votre dos droit. Descendez jusqu'à ce que vos cuisses soient parallèles au sol, puis remontez.",
                muscles: ["Quadriceps", "Ischio-jambiers", "Fessiers"],
                image: "https://www.fitnessfactory.com/images/stretches/squat.jpg",
                repetitions: "3 séries de 12-15 répétitions"
            },
            {
                name: "Planche abdominale",
                description: "Allongez-vous face contre terre, puis soulevez votre corps en vous appuyant sur vos avant-bras et la pointe de vos pieds. Gardez votre corps droit comme une planche, en contractant vos abdominaux et vos fessiers.",
                muscles: ["Abdominaux", "Dos", "Épaules"],
                image: "https://www.fitnessfactory.com/images/stretches/plank.jpg",
                repetitions: "3 séries de 30-60 secondes"
            },
            {
                name: "Soulevé de terre (Deadlift)",
                description: "Tenez-vous debout devant une barre, pieds écartés à la largeur des hanches. Pliez les genoux et les hanches pour saisir la barre. Relevez-vous en poussant avec vos jambes et en gardant le dos droit.",
                muscles: ["Dos", "Ischio-jambiers", "Fessiers"],
                image: "https://www.fitnessfactory.com/images/stretches/deadlift.jpg",
                repetitions: "3 séries de 8-12 répétitions"
            },
            {
                name: "Tractions (Pull-ups)",
                description: "Suspendez-vous à une barre fixe, les mains écartées plus que la largeur des épaules. Tirez votre corps vers le haut jusqu'à ce que votre menton dépasse la barre, puis redescendez lentement.",
                muscles: ["Dos", "Biceps", "Avant-bras"],
                image: "https://www.fitnessfactory.com/images/stretches/pullup.jpg",
                repetitions: "3 séries de 5-10 répétitions"
            }
        ];
        
        // Cartographie des valeurs d'ID de muscles vers leurs noms en français
        const muscleTranslations = {
            "1": "Biceps",
            "2": "Épaules",
            "3": "Poitrine",
            "4": "Triceps",
            "5": "Abdominaux",
            "6": "Dos",
            "7": "Quadriceps",
            "8": "Ischio-jambiers",
            "9": "Mollets",
            "10": "Fessiers"
        };
        
        // Fonction pour obtenir un exercice aléatoire de l'API
        function fetchExercise() {
            // Animation de chargement
            exerciseContent.innerHTML = `
                <div style="display: flex; align-items: center; justify-content: center; height: 250px;">
                    <div style="text-align: center;">
                        <i class="fas fa-spinner fa-spin" style="font-size: 30px; margin-bottom: 15px; color: #ff5e13;"></i>
                        <p>Chargement de l'exercice...</p>
                    </div>
                </div>
            `;
            
            // Obtenir la valeur du filtre de muscle
            const selectedMuscle = muscleFilter.value;
            
            let apiUrl = 'https://wger.de/api/v2/exercise/?language=2&limit=1';
            
            // Si un muscle spécifique est sélectionné, l'ajouter à l'URL
            if (selectedMuscle !== 'all') {
                apiUrl = `https://wger.de/api/v2/exercise/?language=2&muscles=${selectedMuscle}&limit=20`;
            }
            
            // Appel à l'API Wger
            fetch(apiUrl)
                .then(response => {
                    if (!response.ok) throw new Error('Erreur API Wger');
                    return response.json();
                })
                .then(data => {
                    if (data && data.results && data.results.length > 0) {
                        // Si on a spécifié un muscle, prendre un exercice aléatoire parmi les résultats
                        const randomIndex = selectedMuscle === 'all' ? 0 : Math.floor(Math.random() * data.results.length);
                        const exercise = data.results[randomIndex];
                        
                        // Obtenir les informations sur les muscles travaillés
                        const musclePromises = [];
                        if (exercise.muscles && exercise.muscles.length > 0) {
                            exercise.muscles.forEach(muscleId => {
                                musclePromises.push(
                                    fetch(`https://wger.de/api/v2/muscle/${muscleId}/`)
                                        .then(response => response.json())
                                );
                            });
                        }
                        
                        // Obtenir les images de l'exercice (si disponibles)
                        const imagePromise = fetch(`https://wger.de/api/v2/exerciseimage/?exercise=${exercise.id}`)
                            .then(response => response.json());
                        
                        // Attendre toutes les requêtes
                        Promise.all([...musclePromises, imagePromise])
                            .then(results => {
                                // Les n-1 premiers résultats sont les muscles, le dernier est l'image
                                const muscles = results.slice(0, -1);
                                const images = results[results.length - 1];
                                
                                // Formatage et traduction des noms de muscles
                                const muscleNames = muscles.map(muscle => {
                                    return muscleTranslations[muscle.id] || muscle.name_en;
                                });
                                
                                // Obtenir l'URL de l'image (si disponible)
                                let imageUrl = '';
                                if (images.results && images.results.length > 0) {
                                    imageUrl = images.results[0].image;
                                } else {
                                    // Image par défaut si aucune n'est disponible
                                    imageUrl = 'https://via.placeholder.com/400x300?text=Pas+d%27image+disponible';
                                }
                                
                                // Recommandations de répétitions basées sur le type d'exercice
                                let reps = '';
                                if (muscleNames.includes('Abdominaux')) {
                                    reps = "3 séries de 15-20 répétitions";
                                } else if (muscleNames.includes('Dos') || muscleNames.includes('Poitrine')) {
                                    reps = "4 séries de 8-12 répétitions";
                                } else {
                                    reps = "3 séries de 10-15 répétitions";
                                }
                                
                                // Afficher l'exercice
                                displayExercise({
                                    name: exercise.name,
                                    description: exercise.description,
                                    muscles: muscleNames,
                                    image: imageUrl,
                                    repetitions: reps
                                });
                            })
                            .catch(error => {
                                console.error('Erreur lors de la récupération des détails de l\'exercice:', error);
                                // Utiliser un exercice de secours en cas d'échec
                                const randomFallback = fallbackExercises[Math.floor(Math.random() * fallbackExercises.length)];
                                displayExercise(randomFallback);
                            });
                    } else {
                        throw new Error('Aucun exercice trouvé');
                    }
                })
                .catch(error => {
                    console.error('Erreur lors de la récupération de l\'exercice:', error);
                    
                    // Utiliser un exercice de secours en cas d'échec
                    const randomFallback = fallbackExercises[Math.floor(Math.random() * fallbackExercises.length)];
                    displayExercise(randomFallback);
                });
        }
        
        // Fonction pour afficher l'exercice
        function displayExercise(exercise) {
            // Créer le HTML pour les muscles ciblés
            const musclesHtml = exercise.muscles.map(muscle => 
                `<span style="
                    background: rgba(255, 94, 19, 0.2);
                    color: #ff7e47;
                    padding: 3px 8px;
                    border-radius: 12px;
                    font-size: 12px;
                    margin-right: 5px;
                    display: inline-block;
                    margin-bottom: 5px;
                ">${muscle}</span>`
            ).join('');
            
            // Nettoyer la description HTML pour éviter les problèmes de sécurité
            const description = exercise.description
                .replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '')
                .replace(/<iframe\b[^<]*(?:(?!<\/iframe>)<[^<]*)*<\/iframe>/gi, '');
            
            // Mise en page de l'exercice
            exerciseContent.innerHTML = `
                <div style="display: flex; flex-wrap: wrap; gap: 20px;">
                    <div style="flex: 1; min-width: 250px;">
                        <h4 style="font-size: 20px; margin-top: 0; margin-bottom: 15px; color: #ff5e13;">
                            ${exercise.name}
                        </h4>
                        
                        <div style="margin-bottom: 15px;">
                            <p style="font-size: 14px; margin-bottom: 10px; font-weight: 600;">Muscles ciblés:</p>
                            <div>${musclesHtml}</div>
                        </div>
                        
                        <div style="margin-bottom: 15px;">
                            <p style="font-size: 14px; margin-bottom: 10px; font-weight: 600;">Recommandation:</p>
                            <div style="
                                background: rgba(255, 255, 255, 0.1);
                                border-radius: 8px;
                                padding: 10px;
                                font-size: 14px;
                            ">
                                ${exercise.repetitions}
                            </div>
                        </div>
                    </div>
                    
                    <div style="flex: 1; min-width: 250px;">
                        <img src="${exercise.image}" alt="${exercise.name}" style="
                            width: 100%;
                            height: auto;
                            border-radius: 8px;
                            object-fit: cover;
                            max-height: 200px;
                        ">
                    </div>
                </div>
                
                <div style="margin-top: 20px;">
                    <p style="font-size: 14px; margin-bottom: 10px; font-weight: 600;">Description:</p>
                    <div style="
                        background: rgba(255, 255, 255, 0.05);
                        border-radius: 8px;
                        padding: 15px;
                        font-size: 14px;
                        line-height: 1.6;
                    ">
                        ${description}
                    </div>
                </div>
            `;
        }
        
        // Attacher les événements
        if (newExerciseBtn) {
            // Effet de survol pour le bouton
            newExerciseBtn.addEventListener('mouseenter', function() {
                this.style.transform = 'translateY(-2px)';
                this.style.boxShadow = '0 6px 20px rgba(255, 94, 19, 0.4)';
            });
            
            newExerciseBtn.addEventListener('mouseleave', function() {
                this.style.transform = 'translateY(0)';
                this.style.boxShadow = '0 4px 15px rgba(255, 94, 19, 0.3)';
            });
            
            // Événement de clic
            newExerciseBtn.addEventListener('click', function() {
                this.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Chargement...';
                this.disabled = true;
                
                fetchExercise();
                
                setTimeout(() => {
                    this.innerHTML = '<i class="fas fa-sync-alt" style="margin-right: 8px;"></i> Nouvel exercice';
                    this.disabled = false;
                }, 1500);
            });
        }
        
        // Événement de changement de filtre
        if (muscleFilter) {
            muscleFilter.addEventListener('change', function() {
                newExerciseBtn.click();
            });
        }
        
        // Charger un exercice au chargement de la page
        fetchExercise();
    });
</script>
{% endblock %}