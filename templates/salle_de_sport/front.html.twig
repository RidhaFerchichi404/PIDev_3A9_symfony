{% extends 'front.html.twig' %}

{% block title %}Premium Fitness Clubs{% endblock %}

{% block body %}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
<link href="https://api.mapbox.com/mapbox-gl-js/v2.3.1/mapbox-gl.css" rel="stylesheet" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" rel="stylesheet" />
<script src="https://api.mapbox.com/mapbox-gl-js/v2.3.1/mapbox-gl.js"></script>

<style>
    /* Chat-style Workout & Diet Plan Widget */
#workout-plan {
  max-width: 600px;
  margin: 40px auto;
  background: #1a1a1a;
  border-radius: 12px;
  box-shadow: 0 8px 24px rgba(0,0,0,0.5);
  overflow: hidden;
  color: #eee;
  font-family: 'Segoe UI', sans-serif;
}
#workout-plan h2 {
  background: none !important;
  color: #ff8c00 !important;
}

#workout-plan form {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 12px;
  padding: 20px;
}
#workout-plan form label {
  display: block;
  font-size: 0.9rem;
  color: #ccc;
}
#workout-plan form input,
#workout-plan form select {
  width: 100%;
  padding: 10px 12px;
  margin-top: 4px;
  background: #2a2a2a;
  border: none;
  border-radius: 6px;
  color: #fff;
  transition: background 0.2s;
}
#workout-plan form input:focus,
#workout-plan form select:focus {
  background: #333;
  outline: none;
}
#workout-plan form button {
  grid-column: span 2;
  padding: 12px;
  background: #ff5e13;
  border: none;
  border-radius: 6px;
  color: #fff;
  font-weight: bold;
  font-size: 1rem;
  cursor: pointer;
  transition: background 0.2s;
}
#workout-plan form button:hover {
  background: #e04e0f;
}
#plan-output {
  display: block;
  margin: 0 20px 20px;
  padding: 15px;
  background: #111;
  border-radius: 6px;
  color: #ddd;
  white-space: pre-wrap;
  font-family: Consolas, monospace;
  line-height: 1.4;
}
#plan-error {
  display: block;
  margin: 0 20px 20px;
  font-size: 0.9rem;
  color: #e74c3c;
}

    body {
        background-color: #0f0f0f;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        color: #fff;
    }

    /* Hero Section */
    .hero-section {
        background: linear-gradient(rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.9)), url('{{ asset('images/gym-hero.jpg') }}');
        background-size: cover;
        background-position: center;
        padding: 120px 0;
        position: relative;
        margin-bottom: 80px;
    }

    .hero-content {
        text-align: center;
        max-width: 900px;
        margin: 0 auto;
        padding: 0 20px;
    }

    .hero-title {
        font-size: 52px;
        font-weight: 900;
        margin-bottom: 20px;
        text-transform: uppercase;
        letter-spacing: 2px;
        background: linear-gradient(to right, #ff5e13, #ff8c00);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        animation: fadeInDown 1s both;
    }

    .hero-subtitle {
        color: #e0e0e0;
        font-size: 18px;
        margin-bottom: 40px;
        font-weight: 300;
        line-height: 1.6;
        animation: fadeIn 1.5s both;
    }

    .search-box {
        background: rgba(15, 15, 15, 0.8);
        max-width: 700px;
        margin: 0 auto;
        padding: 30px;
        border-radius: 20px;
        backdrop-filter: blur(10px);
        box-shadow: 0 15px 35px rgba(0, 0, 0, 0.3);
        border: 1px solid rgba(255, 255, 255, 0.1);
        animation: fadeInUp 1s both;
        animation-delay: 0.5s;
    }

    .search-form {
        display: flex;
        flex-wrap: wrap;
        gap: 15px;
    }

    .search-input {
        flex: 1;
        min-width: 250px;
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        color: #fff;
        padding: 15px 20px;
        border-radius: 50px;
        font-size: 16px;
        transition: all 0.3s ease;
    }

    .search-input:focus {
        background: rgba(255, 255, 255, 0.15);
        border-color: #ff5e13;
        outline: none;
        box-shadow: 0 0 0 3px rgba(255, 94, 19, 0.2);
    }

    .search-input::placeholder {
        color: rgba(255, 255, 255, 0.6);
    }

    .search-btn {
        background: linear-gradient(to right, #ff5e13, #ff8c00);
        border: none;
        color: white;
        padding: 15px 30px;
        border-radius: 50px;
        font-weight: 600;
        font-size: 16px;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 10px 20px rgba(255, 94, 19, 0.3);
    }

    .search-btn:hover {
        transform: translateY(-3px);
        box-shadow: 0 15px 30px rgba(255, 94, 19, 0.4);
    }

    /* Filter Tags */
    .filter-tags {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin-top: 20px;
    }

    .filter-tag {
        background: rgba(255, 255, 255, 0.1);
        color: white;
        border: 1px solid rgba(255, 255, 255, 0.2);
        padding: 8px 20px;
        border-radius: 50px;
        font-size: 14px;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .filter-tag:hover, .filter-tag.active {
        background: rgba(255, 94, 19, 0.2);
        border-color: #ff5e13;
        color: #ff5e13;
    }

    /* Section Titles */
    .section-heading {
        text-align: center;
        margin-bottom: 60px;
        position: relative;
    }

    .section-badge {
        background: linear-gradient(135deg, #ff5e13, #ff8c00);
        color: white;
        padding: 8px 16px;
        border-radius: 30px;
        font-size: 13px;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 1px;
        margin-bottom: 15px;
        display: inline-block;
        box-shadow: 0 4px 15px rgba(255, 94, 19, 0.3);
    }

    .section-title {
        font-size: 42px;
        font-weight: 800;
        margin-bottom: 20px;
        color: white;
        letter-spacing: 1px;
    }

    .section-subtitle {
        font-size: 16px;
        color: #aaa;
        max-width: 700px;
        margin: 0 auto;
        line-height: 1.6;
    }

    /* Gym Cards */
    .gyms-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
        gap: 30px;
        padding: 0 15px;
    }

    .gym-card {
        background: linear-gradient(145deg, #181818, #0f0f0f);
        border-radius: 20px;
        overflow: hidden;
        box-shadow: 0 15px 35px rgba(0, 0, 0, 0.3);
        transition: all 0.4s ease;
        height: 100%;
        border: 1px solid rgba(255, 255, 255, 0.1);
        position: relative;
        transform: translateY(0);
        opacity: 0;
        animation: fadeInUp 0.6s forwards;
        animation-delay: calc(var(--i) * 0.1s);
    }

    .gym-card:hover {
        transform: translateY(-15px);
        box-shadow: 0 20px 50px rgba(255, 94, 19, 0.3);
        border-color: rgba(255, 94, 19, 0.3);
    }

    .gym-card img {
        width: 100%;
        height: 250px;
        object-fit: cover;
        transition: all 0.5s ease;
        filter: brightness(0.9);
    }

    .gym-card:hover img {
        transform: scale(1.05);
        filter: brightness(1.1);
    }

    .gym-card .content {
        padding: 30px;
        position: relative;
    }

    .gym-location {
        position: absolute;
        top: -20px;
        left: 30px;
        background: linear-gradient(135deg, #ff5e13, #ff8c00);
        color: white;
        padding: 8px 20px;
        border-radius: 30px;
        font-size: 13px;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 1px;
        box-shadow: 0 5px 15px rgba(255, 94, 19, 0.3);
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .gym-name {
        font-size: 24px;
        font-weight: 700;
        margin: 15px 0;
        color: white;
    }

    .gym-description {
        font-size: 14px;
        color: #aaa;
        margin-bottom: 25px;
        line-height: 1.6;
    }

    .equipment-tags {
        display: flex;
        flex-wrap: wrap;
        gap: 5px;
        margin-bottom: 20px;
    }

    .equipment-tag {
        background: rgba(255, 255, 255, 0.1);
        color: #ccc;
        font-size: 12px;
        padding: 4px 10px;
        border-radius: 20px;
        display: inline-flex;
        align-items: center;
        gap: 5px;
    }

    .btn-group {
        display: flex;
        gap: 15px;
    }

    .btn {
        flex: 1;
        padding: 12px;
        border-radius: 10px;
        font-weight: 600;
        font-size: 14px;
        transition: all 0.3s ease;
        text-align: center;
        text-decoration: none;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
    }

    .btn-primary {
        background: linear-gradient(135deg, #ff5e13, #ff8c00);
        color: white;
        border: none;
        box-shadow: 0 4px 15px rgba(255, 94, 19, 0.3);
    }

    .btn-primary:hover {
        transform: translateY(-3px);
        box-shadow: 0 8px 25px rgba(255, 94, 19, 0.5);
        color: white;
    }

    .btn-secondary {
        background: rgba(255, 255, 255, 0.1);
        color: white;
        border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .btn-secondary:hover {
        background: rgba(255, 255, 255, 0.15);
        border-color: rgba(255, 255, 255, 0.3);
        transform: translateY(-3px);
        color: white;
    }

    /* Map Container */
    .map-container {
        width: 100%;
        height: 0;
        overflow: hidden;
        transition: height 0.5s ease;
        margin-top: 20px;
        border-radius: 15px;
        border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .map-container.active {
        height: 300px;
    }

    /* Results Info */
    .results-info {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
        padding: 0 15px;
    }

    .results-count {
        font-size: 16px;
        color: #aaa;
    }

    .results-count span {
        color: #ff5e13;
        font-weight: 600;
    }

    .sort-options {
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .sort-label {
        color: #aaa;
        font-size: 14px;
    }

    .sort-select {
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        color: white;
        padding: 8px 15px;
        border-radius: 10px;
        font-size: 14px;
        transition: all 0.3s ease;
    }

    .sort-select:focus {
        outline: none;
        border-color: #ff5e13;
    }

    /* Animations */
    @keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(30px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @keyframes fadeIn {
        from {
            opacity: 0;
        }
        to {
            opacity: 1;
        }
    }

    @keyframes fadeInDown {
        from {
            opacity: 0;
            transform: translateY(-30px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    /* No Results Message */
    .no-results {
        background: rgba(255, 255, 255, 0.05);
        border-radius: 15px;
        padding: 50px 30px;
        text-align: center;
        margin: 0 15px;
    }

    .no-results i {
        font-size: 50px;
        color: #555;
        margin-bottom: 20px;
    }

    .no-results h3 {
        font-size: 24px;
        color: white;
        margin-bottom: 15px;
    }

    .no-results p {
        color: #aaa;
        margin-bottom: 25px;
    }

    .btn-reset {
        background: linear-gradient(135deg, #ff5e13, #ff8c00);
        color: white;
        border: none;
        padding: 12px 25px;
        border-radius: 10px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        gap: 8px;
    }

    .btn-reset:hover {
        transform: translateY(-3px);
        box-shadow: 0 8px 25px rgba(255, 94, 19, 0.3);
    }

    /* Loader */
    .loader {
        display: inline-block;
        width: 30px;
        height: 30px;
        border: 3px solid rgba(255, 255, 255, 0.3);
        border-radius: 50%;
        border-top-color: #ff5e13;
        animation: spin 1s linear infinite;
        margin-right: 10px;
    }

    @keyframes spin {
        to {
            transform: rotate(360deg);
        }
    }

    /* Responsive */
    @media (max-width: 768px) {
        .hero-title {
            font-size: 36px;
        }

        .hero-subtitle {
            font-size: 16px;
        }

        .section-title {
            font-size: 32px;
        }

        .gyms-container {
            grid-template-columns: 1fr;
        }

        .search-form {
            flex-direction: column;
        }
    }

    /* Fitness Chatbot */
    .chatbot-toggle {
        position: fixed;
        bottom: 20px;
        right: 20px;
        width: 60px;
        height: 60px;
        border-radius: 50%;
        background: linear-gradient(135deg, #ff5e13, #ff8c00);
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 24px;
        box-shadow: 0 5px 15px rgba(255, 94, 19, 0.4);
        cursor: pointer;
        z-index: 1000;
        transition: all 0.3s ease;
    }

    .chatbot-toggle:hover {
        transform: scale(1.1);
    }

    .chatbot-container {
        position: fixed;
        bottom: 90px;
        right: 20px;
        width: 350px;
        height: 500px;
        background: #1a1a1a;
        border-radius: 20px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
        z-index: 999;
        overflow: hidden;
        display: flex;
        flex-direction: column;
        border: 1px solid rgba(255, 255, 255, 0.1);
        transform: translateY(20px);
        opacity: 0;
        pointer-events: none;
        transition: all 0.3s ease;
    }

    .chatbot-container.active {
        transform: translateY(0);
        opacity: 1;
        pointer-events: all;
    }

    .chatbot-header {
        background: linear-gradient(135deg, #ff5e13, #ff8c00);
        padding: 15px;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .chatbot-title {
        color: white;
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .chatbot-close {
        background: rgba(0, 0, 0, 0.2);
        width: 30px;
        height: 30px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .chatbot-close:hover {
        background: rgba(0, 0, 0, 0.4);
    }

    .chatbot-messages {
        flex: 1;
        padding: 15px;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .chat-message {
        max-width: 80%;
        padding: 12px 15px;
        border-radius: 18px;
        line-height: 1.4;
        font-size: 14px;
        animation: fadeIn 0.3s forwards;
    }

    .bot-message {
        background: #333;
        border-top-left-radius: 5px;
        align-self: flex-start;
    }

    .user-message {
        background: linear-gradient(135deg, #ff5e13, #ff8c00);
        color: white;
        border-top-right-radius: 5px;
        align-self: flex-end;
    }

    .chatbot-input {
        padding: 15px;
        border-top: 1px solid rgba(255, 255, 255, 0.1);
        display: flex;
        gap: 10px;
    }

    .chat-input {
        flex: 1;
        background: rgba(255, 255, 255, 0.1);
        border: none;
        border-radius: 20px;
        padding: 10px 15px;
        color: white;
        outline: none;
    }

    .chat-send {
        background: linear-gradient(135deg, #ff5e13, #ff8c00);
        border: none;
        width: 40px;
        height: 40px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .chat-send:hover {
        transform: scale(1.1);
    }

    /* Form inputs in chat */
    .chat-form {
        display: flex;
        flex-direction: column;
        gap: 10px;
        width: 100%;
    }

    .chat-form-row {
        display: flex;
        gap: 10px;
    }

    .chat-form-input {
        flex: 1;
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: 10px;
        padding: 10px;
        color: white;
        font-size: 14px;
    }

    .chat-form-btn {
        background: linear-gradient(135deg, #ff5e13, #ff8c00);
        color: white;
        border: none;
        border-radius: 10px;
        padding: 10px 15px;
        cursor: pointer;
        font-weight: 600;
        transition: all 0.3s ease;
    }

    .chat-form-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(255, 94, 19, 0.3);
    }

    /* Workout Calendar */
    .workout-calendar {
        background: #222;
        border-radius: 15px;
        padding: 15px;
        margin-top: 10px;
        border: 1px solid rgba(255, 255, 255, 0.1);
        font-size: 14px;
    }

    .calendar-header {
        display: flex;
        justify-content: space-between;
        margin-bottom: 15px;
        padding-bottom: 10px;
        font-weight: 600;
        color: #ff5e13;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        font-size: 18px;
    }

    .calendar-days {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        gap: 10px;
    }

    .calendar-day {
        padding: 10px;
        border-radius: 10px;
        background: #2a2a2a;
        font-size: 13px;
        min-height: 120px;
        border: 1px solid rgba(255, 255, 255, 0.05);
        transition: all 0.3s ease;
    }
    
    .calendar-day:hover {
        background: #333;
        transform: translateY(-3px);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
    }

    .day-name {
        font-weight: 600;
        margin-bottom: 8px;
        color: #ff8c00;
        padding-bottom: 5px;
        border-bottom: 1px dashed rgba(255, 255, 255, 0.1);
        font-size: 14px;
    }

    .workout-item {
        font-size: 12px;
        margin-bottom: 8px;
        color: #ddd;
        padding: 5px 8px;
        background: rgba(255, 255, 255, 0.05);
        border-radius: 5px;
        transition: all 0.3s ease;
    }
    
    .workout-item:hover {
        background: rgba(255, 94, 19, 0.2);
    }
    
    .equipment-tag {
        display: inline-block;
        background: rgba(255, 94, 19, 0.2);
        color: #ff8c00;
        font-size: 10px;
        padding: 2px 6px;
        border-radius: 10px;
        margin-top: 3px;
        margin-right: 3px;
    }
    
    /* Full-width calendar modal */
    .calendar-modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.8);
        z-index: 1001;
        justify-content: center;
        align-items: center;
        padding: 20px;
    }
    
    .calendar-modal.active {
        display: flex;
    }
    
    .calendar-modal-content {
        background: #1a1a1a;
        width: 90%;
        max-width: 1000px;
        height: 80%;
        border-radius: 20px;
        box-shadow: 0 15px 50px rgba(0, 0, 0, 0.5);
        overflow: hidden;
        display: flex;
        flex-direction: column;
        position: relative;
    }
    
    .calendar-modal-header {
        background: linear-gradient(135deg, #ff5e13, #ff8c00);
        padding: 15px 20px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        color: white;
    }
    
    .calendar-modal-title {
        font-size: 20px;
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 10px;
    }
    
    .calendar-modal-close {
        background: rgba(0, 0, 0, 0.2);
        width: 30px;
        height: 30px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.3s ease;
        color: white;
    }
    
    .calendar-modal-close:hover {
        background: rgba(0, 0, 0, 0.4);
    }
    
    .calendar-modal-body {
        flex: 1;
        padding: 20px;
        overflow-y: auto;
    }
    
    .modal-calendar {
        background: transparent;
        margin: 0;
    }
    
    .modal-calendar .calendar-days {
        grid-template-columns: repeat(7, 1fr);
    }
    
    .modal-calendar .calendar-day {
        min-height: 250px;
        padding: 15px;
    }
    
    .modal-calendar .day-name {
        font-size: 16px;
        margin-bottom: 15px;
    }
    
    .modal-calendar .workout-item {
        font-size: 14px;
        padding: 8px 12px;
        margin-bottom: 10px;
    }
    
    .workout-equipment {
        margin-top: 5px;
        display: flex;
        flex-wrap: wrap;
        gap: 5px;
    }
    
    /* Expanded chatbot */
    .chatbot-container {
        width: 400px;
        height: 600px;
    }
    
    .chatbot-messages {
        padding: 20px;
        gap: 20px;
    }
    
    .chat-message {
        max-width: 85%;
        padding: 15px 18px;
        font-size: 15px;
        line-height: 1.5;
    }
    
    .chatbot-input {
        padding: 20px;
    }
    
    .chat-input {
        padding: 12px 20px;
        font-size: 15px;
    }
    
    .chat-send {
        width: 45px;
        height: 45px;
    }

    /* Styles pour les boutons d'action dans le chat */
    .message-actions {
        margin-top: 12px;
    }
    
    .action-buttons {
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
    }
    
    .action-btn {
        background: linear-gradient(135deg, #FF5722, #FF9800);
        color: white;
        border: none;
        border-radius: 20px;
        padding: 8px 15px;
        font-size: 13px;
        cursor: pointer;
        display: flex;
        align-items: center;
        transition: all 0.3s ease;
        box-shadow: 0 2px 5px rgba(0,0,0,0.2);
    }
    
    .action-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.3);
    }
    
    .action-btn i {
        margin-right: 6px;
    }
    
    .view-diet-btn {
        background: linear-gradient(135deg, #4CAF50, #8BC34A);
    }
    
    .view-body-btn {
        background: linear-gradient(135deg, #2196F3, #03A9F4);
    }
    
    @media (max-width: 768px) {
        .action-buttons {
            flex-direction: column;
            width: 100%;
        }
        
        .action-btn {
            width: 100%;
            justify-content: center;
        }
    }
</style>

<!-- Hero Section -->
<section class="hero-section">
    <div class="hero-content">
        <h1 class="hero-title">Premium Fitness Centers</h1>
        <p class="hero-subtitle">Discover our exclusive selection of top-tier gyms designed to elevate your fitness journey</p>
        
        <!-- Widget Météo -->
        <div class="weather-widget" style="background: rgba(32, 32, 32, 0.95); max-width: 250px; margin: 0 auto 20px; padding: 15px; border-radius: 12px; color: white; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);">
            <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 5px;">
                <div style="display: flex; align-items: center; gap: 10px;">
                    <i class="fas fa-exclamation-triangle" style="color: #ffd700;"></i>
                    <span style="color: #fff; font-size: 14px;">Tunis</span>
                </div>
                <span style="color: #aaa; font-size: 12px;" id="weather-time">10:30</span>
            </div>
            
            <div style="display: flex; align-items: center; margin: 15px 0;">
                <i id="weather-icon" class="fas fa-sun" style="color: #ffd700; font-size: 24px; margin-right: 10px;"></i>
                <span id="weather-temp" style="font-size: 28px; font-weight: bold;">--°C</span>
            </div>
            <div id="weather-desc" style="color: #fff; margin-bottom: 15px; font-size: 16px;">--</div>
            
            <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 10px; text-align: center; margin-top: 10px;">
                <div>
                    <i class="fas fa-temperature-low" style="color: #ff8c00; font-size: 16px;"></i>
                    <div style="color: #aaa; font-size: 12px; margin-top: 5px;">Ressenti</div>
                    <div id="weather-feels" style="font-size: 14px;">--°C</div>
                </div>
                <div>
                    <i class="fas fa-tint" style="color: #4a90e2; font-size: 16px;"></i>
                    <div style="color: #aaa; font-size: 12px; margin-top: 5px;">Humidité</div>
                    <div id="weather-humidity" style="font-size: 14px;">--%</div>
                </div>
                <div>
                    <i class="fas fa-wind" style="color: #7ed321; font-size: 16px;"></i>
                    <div style="color: #aaa; font-size: 12px; margin-top: 5px;">Vent</div>
                    <div id="weather-wind" style="font-size: 14px;">-- km/h</div>
                </div>
            </div>
        </div>
        
        <div class="search-box">
            <form class="search-form">
                <input type="text" class="search-input" id="search-gym" placeholder="Search by gym name, region or zone...">
                <button type="button" class="search-btn" id="search-btn">
                    <i class="fas fa-search me-2"></i> Find Gym
                </button>
            </form>
            
            <div class="filter-tags">
                {% set regions = [] %}
                {% for gym in salle_de_sports %}
                    {% if gym.region not in regions %}
                        {% set regions = regions|merge([gym.region]) %}
                    {% endif %}
                {% endfor %}
                
                <div class="filter-tag active" data-filter="all">
                    <i class="fas fa-th-large"></i> All
                </div>
                
                {% for region in regions %}
                    <div class="filter-tag" data-filter="{{ region }}">
                        <i class="fas fa-map-marker-alt"></i> {{ region }}
                    </div>
                {% endfor %}
            </div>

           
        </div>
    </div>
</section>

<!-- Gyms Section -->
<section class="gyms-section">
    <div class="container">
        <div class="section-heading">
            <span class="section-badge">World-Class Facilities</span>
            <h2 class="section-title">Explore Our Premium Gyms</h2>
            <p class="section-subtitle">Each location offers state-of-the-art equipment, expert trainers, and personalized amenities to help you achieve your fitness goals</p>
        </div>
        
        <div class="results-info">
            <div class="results-count" id="results-counter">
                Showing <span id="shown-count">{{ salle_de_sports|length }}</span> of <span id="total-count">{{ salle_de_sports|length }}</span> gyms
            </div>
            
            <div class="sort-options">
                <span class="sort-label">Sort by:</span>
                <select class="sort-select" id="sort-select">
                    <option value="az">Name (A-Z)</option>
                    <option value="za">Name (Z-A)</option>
                </select>
            </div>
        </div>
        
        <div class="gyms-container" id="gyms-container">
            {% for salle_de_sport in salle_de_sports %}
                <div class="gym-card" style="--i: {{ loop.index }}" data-name="{{ salle_de_sport.nom }}" data-region="{{ salle_de_sport.region }}" data-zone="{{ salle_de_sport.zone }}">
                    {% if salle_de_sport.image is not empty %}
                        {% set imagePath = salle_de_sport.image starts with '/' ? salle_de_sport.image : 'images/' ~ salle_de_sport.image %}
                        <img src="{{ asset(imagePath) }}" alt="{{ salle_de_sport.nom }}" onerror="this.onerror=null;this.src='{{ asset('images/default.jpg') }}';">
                    {% else %}
                        <img src="{{ asset('images/default.jpg') }}" alt="No image">
                    {% endif %}
                    
                    <div class="content">
                        <div class="gym-location">
                            <i class="fas fa-map-marker-alt"></i> {{ salle_de_sport.zone }}
                        </div>
                        
                        <h3 class="gym-name">{{ salle_de_sport.nom|title }}</h3>
                        
                        <p class="gym-description">{{ salle_de_sport.region }} | Premium fitness center with advanced equipment and personalized training programs.</p>
                        
                        <div class="equipment-tags">
                            {% for equipment in salle_de_sport.equipements|slice(0, 3) %}
                                <span class="equipment-tag">
                                    <i class="fas fa-dumbbell"></i> {{ equipment.nom }}
                                </span>
                            {% endfor %}
                            {% if salle_de_sport.equipements|length > 3 %}
                                <span class="equipment-tag">
                                    +{{ salle_de_sport.equipements|length - 3 }}
                                </span>
                            {% endif %}
                        </div>
                        
                        <div class="btn-group">
                            <a href="javascript:void(0);" class="btn btn-secondary" onclick="showPlace('{{ salle_de_sport.zone }}', 'map{{ salle_de_sport.id }}')">
                                <i class="fas fa-map-marker-alt"></i> Show Place
                            </a>
                            <a href="{{ path('app_salle_de_sport_equipementsf', { 'id': salle_de_sport.id }) }}" class="btn btn-primary">
                                <i class="fas fa-dumbbell"></i> Equipment
                            </a>
                        </div>
                        
                        <!-- Map container -->
                        <div id="map{{ salle_de_sport.id }}" class="map-container"></div>
                    </div>
                </div>
            {% else %}
                <div class="no-results">
                    <i class="fas fa-search"></i>
                    <h3>No gyms found</h3>
                    <p>We couldn't find any gyms matching your criteria. Please try different search terms.</p>
                </div>
            {% endfor %}
        </div>
        
        <!-- No Results Message (hidden by default) -->
        <div class="no-results" id="no-results" style="display: none;">
            <i class="fas fa-search"></i>
            <h3>No gyms found</h3>
            <p>We couldn't find any gyms matching your search criteria. Please try different search terms or reset your filters.</p>
            <button class="btn-reset" id="reset-search">
                <i class="fas fa-undo"></i> Reset Search
            </button>
        </div>
    </div>
</section>





  {# === Workout & Diet Plan Form === #}
  <section id="workout-plan" class="container" style="max-width:600px; margin:40px auto; background:#1a1a1a; padding:30px; border-radius:10px;">
    <h2>Your Personal Workout &amp; Diet Plan</h2>

    <form id="plan-form">
      <label>Weight (kg)
        <input type="number" name="weight" step="0.1" required>
      </label>

      <label>Height (cm)
        <input type="number" name="height" step="0.5" required>
      </label>

      <label>Age
        <input type="number" name="age">
      </label>

      <label>Gender
        <select name="gender">
          <option>Male</option>
          <option>Female</option>
        </select>
      </label>

      <label>Level
        <select name="level">
          <option value="beginner">Beginner</option>
          <option value="intermediate">Intermediate</option>
          <option value="advanced">Advanced</option>
        </select>
      </label>

      <button type="submit" style="background:#ff5e13;color:#fff;padding:10px;border:none;border-radius:5px;margin-top:20px;cursor:pointer;">
        Get My Plan
      </button>
    </form>

    <div id="plan-output" style="display:none;white-space:pre-wrap;background:#111;color:#ddd;padding:15px;border-radius:5px;margin-top:20px;"></div>
    <div id="plan-error"  style="display:none;color:#e74c3c;padding:10px;margin-top:20px;"></div>
  </section>

  <script>
    document.getElementById('plan-form').addEventListener('submit', async function(e) {
      e.preventDefault();
      const output = document.getElementById('plan-output');
      const error  = document.getElementById('plan-error');
      output.style.display = 'block';
      error.style.display  = 'none';
      output.textContent   = 'Generating your personalized plan…';

      // gather form data
      const form = new FormData(this);
      const weight = form.get('weight');
      const height = form.get('height');
      const age    = form.get('age') || 'N/A';
      const gender = form.get('gender');
      const level  = form.get('level');

      // build the prompt
      const prompt = `
User weighs ${weight} kg,
is ${height} cm tall,
age ${age},
gender: ${gender},
level: ${level}.
Provide a 7-day workout plan and daily diet plan.
      `.trim();

      try {
        const res = await fetch('https://api.openai.com/v1/chat/completions', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer '
          },
          body: JSON.stringify({
            model: 'gpt-3.5-turbo',
            messages: [
              { role: 'system', content: 'You are an expert fitness and nutrition coach.' },
              { role: 'user',   content: prompt }
            ],
            temperature: 0.7,
            max_tokens: 800
          })
        });

        if (!res.ok) throw new Error(await res.text());
        const { choices } = await res.json();
        if (choices && choices[0] && choices[0].message) {
          output.textContent = choices[0].message.content;
        } else {
          throw new Error('No plan generated.');
        }
      } catch (err) {
        output.style.display = 'none';
        error.style.display  = 'block';
        error.textContent    = 'Error: ' + err.message;
      }
    });
  </script>


  

<script>
    // Initialize Mapbox
    mapboxgl.accessToken = 'pk.eyJ1IjoiYXJpamNoYWFvdXJpIiwiYSI6ImNtN3FyZTN2cDEyeGcya3MzYjJzYWw3dGgifQ.PDmXhuINWST2Uer-SzPTVw';

    // Function to update weather
    function updateWeather(lat, lon) {
        const apiKey = 'f97fc74c4705898a7da336427c63d904';
        const weatherUrl = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${apiKey}&units=metric`;
        
        // Update time
        const now = new Date();
        const timeString = now.getHours().toString().padStart(2, '0') + ':' + 
                          now.getMinutes().toString().padStart(2, '0');
        document.getElementById('weather-time').textContent = timeString;
        
        fetch(weatherUrl)
            .then(response => response.json())
            .then(data => {
                const temp = Math.round(data.main.temp);
                const feels_like = Math.round(data.main.feels_like);
                const humidity = data.main.humidity;
                const windSpeed = Math.round(data.wind.speed * 3.6); // Convert m/s to km/h
                const desc = data.weather[0].description;
                const iconCode = data.weather[0].icon;
                
                // Update weather elements
                document.getElementById('weather-temp').textContent = `${temp}°C`;
                document.getElementById('weather-desc').textContent = desc.charAt(0).toUpperCase() + desc.slice(1);
                document.getElementById('weather-feels').textContent = `${feels_like}°C`;
                document.getElementById('weather-humidity').textContent = `${humidity}%`;
                document.getElementById('weather-wind').textContent = `${windSpeed} km/h`;
                
                // Update weather icon
                const iconMap = {
                    '01d': 'fa-sun',
                    '01n': 'fa-moon',
                    '02d': 'fa-cloud-sun',
                    '02n': 'fa-cloud-moon',
                    '03d': 'fa-cloud',
                    '03n': 'fa-cloud',
                    '04d': 'fa-cloud',
                    '04n': 'fa-cloud',
                    '09d': 'fa-cloud-rain',
                    '09n': 'fa-cloud-rain',
                    '10d': 'fa-cloud-sun-rain',
                    '10n': 'fa-cloud-moon-rain',
                    '11d': 'fa-bolt',
                    '11n': 'fa-bolt',
                    '13d': 'fa-snowflake',
                    '13n': 'fa-snowflake',
                    '50d': 'fa-smog',
                    '50n': 'fa-smog'
                };
                
                const weatherIcon = document.getElementById('weather-icon');
                weatherIcon.className = `fas ${iconMap[iconCode] || 'fa-cloud'}`;
            })
            .catch(error => {
                console.error('Error fetching weather:', error);
                document.getElementById('weather-temp').textContent = '--°C';
                document.getElementById('weather-desc').textContent = 'Weather unavailable';
                document.getElementById('weather-feels').textContent = '--°C';
                document.getElementById('weather-humidity').textContent = '--%';
                document.getElementById('weather-wind').textContent = '-- km/h';
            });
    }

    // Function to show location on map
    function showPlace(zone, mapId) {
        const mapContainer = document.getElementById(mapId);
        
        // Toggle map visibility
        if (mapContainer.classList.contains('active')) {
            mapContainer.classList.remove('active');
            return;
        }
        
        mapContainer.classList.add('active');

        // Get the gym card element to access its data attributes
        const gymCard = document.querySelector(`#${mapId}`).closest('.gym-card');
        const region = gymCard.getAttribute('data-region');
        
        // Coordonnées des régions de Tunisie
        const regionCoordinates = {
            'Tunis': [10.1815, 36.8065],
            'Ariana': [10.1647, 36.8665],
            'Ben Arous': [10.2333, 36.7500],
            'Manouba': [10.0986, 36.8081],
            'Nabeul': [10.7307, 36.4513],
            'Zaghouan': [10.1433, 36.4028],
            'Bizerte': [9.8642, 37.2744],
            'Béja': [9.1844, 36.7256],
            'Jendouba': [8.7803, 36.5013],
            'Kef': [8.7096, 36.1672],
            'Siliana': [9.3708, 36.0847],
            'Sousse': [10.6408, 35.8245],
            'Monastir': [10.8113, 35.7643],
            'Mahdia': [11.0622, 35.5047],
            'Sfax': [10.7600, 34.7400],
            'Kairouan': [10.0963, 35.6781],
            'Kasserine': [8.8369, 35.1722],
            'Sidi Bouzid': [9.4848, 35.0382],
            'Gabès': [10.0975, 33.8881],
            'Medenine': [10.4911, 33.3547],
            'Tataouine': [10.4518, 32.9297],
            'Gafsa': [8.7840, 34.4250],
            'Tozeur': [8.1336, 33.9197],
            'Kebili': [8.9692, 33.7050]
        };

        // Get coordinates for the region
        let coordinates = regionCoordinates[region] || [10.1815, 36.8065]; // Default to Tunis if region not found
        
        // Initialize map
        const map = new mapboxgl.Map({
            container: mapId,
            style: 'mapbox://styles/mapbox/streets-v11',
            center: coordinates,
            zoom: 11
        });

        // Add marker
        new mapboxgl.Marker({
            color: '#ff5e13'
        })
        .setLngLat(coordinates)
        .addTo(map);

        // Update weather for this location
        updateWeather(coordinates[1], coordinates[0]);

        // Add click event to map to update weather for clicked location
        map.on('click', function(e) {
            const clickedLng = e.lngLat.lng;
            const clickedLat = e.lngLat.lat;
            updateWeather(clickedLat, clickedLng);
        });

        // Resize after a small delay to ensure proper rendering
        setTimeout(() => {
            map.resize();
        }, 200);
    }

    // Document ready
    document.addEventListener('DOMContentLoaded', function() {
        const gymCards = document.querySelectorAll('.gym-card');
        const filterTags = document.querySelectorAll('.filter-tag');
        const searchInput = document.getElementById('search-gym');
        const searchBtn = document.getElementById('search-btn');
        const sortSelect = document.getElementById('sort-select');
        const resetSearchBtn = document.getElementById('reset-search');
        const noResultsDiv = document.getElementById('no-results');
        const gymsContainer = document.getElementById('gyms-container');
        const resultsCounter = document.getElementById('results-counter');
        const shownCountElement = document.getElementById('shown-count');
        const totalCountElement = document.getElementById('total-count');
        
        // Total number of gyms
        const totalGyms = gymCards.length;
        totalCountElement.textContent = totalGyms;
        
        // Search functionality
        function performSearch() {
            const searchTerm = searchInput.value.toLowerCase().trim();
            const activeFilter = document.querySelector('.filter-tag.active').getAttribute('data-filter');
            
            let visibleCount = 0;
            
            gymCards.forEach(card => {
                const name = card.getAttribute('data-name').toLowerCase();
                const region = card.getAttribute('data-region').toLowerCase();
                const zone = card.getAttribute('data-zone').toLowerCase();
                
                // Check if matches search term
                const matchesSearch = !searchTerm || 
                    name.includes(searchTerm) || 
                    region.includes(searchTerm) || 
                    zone.includes(searchTerm);
                
                // Check if matches active filter
                const matchesFilter = activeFilter === 'all' || region === activeFilter.toLowerCase();
                
                // Show/hide based on both conditions
                if (matchesSearch && matchesFilter) {
                    card.style.display = 'block';
                    visibleCount++;
                } else {
                    card.style.display = 'none';
                }
            });
            
            // Update results counter
            shownCountElement.textContent = visibleCount;
            
            // Show/hide no results message
            if (visibleCount === 0) {
                gymsContainer.style.display = 'none';
                noResultsDiv.style.display = 'block';
            } else {
                gymsContainer.style.display = 'grid';
                noResultsDiv.style.display = 'none';
            }
        }
        
        // Filter tags click
        filterTags.forEach(tag => {
            tag.addEventListener('click', function() {
                // Remove active class from all tags
                filterTags.forEach(t => t.classList.remove('active'));
                
                // Add active class to clicked tag
                this.classList.add('active');
                
                // Perform search with new filter
                performSearch();
            });
        });
        
        // Search input event
        searchInput.addEventListener('input', performSearch);
        
        // Search button click
        searchBtn.addEventListener('click', performSearch);
        
        // Reset search
        resetSearchBtn.addEventListener('click', function() {
            searchInput.value = '';
            
            // Reset filters
            filterTags.forEach(tag => {
                tag.classList.remove('active');
                if (tag.getAttribute('data-filter') === 'all') {
                    tag.classList.add('active');
                }
            });
            
            // Show all gyms
            gymCards.forEach(card => {
                card.style.display = 'block';
            });
            
            // Update UI
            shownCountElement.textContent = totalGyms;
            gymsContainer.style.display = 'grid';
            noResultsDiv.style.display = 'none';
        });
        
        // Sorting functionality
        sortSelect.addEventListener('change', function() {
            const sortValue = this.value;
            const cardsArray = Array.from(gymCards);
            
            // Sort the array of cards
            cardsArray.sort((a, b) => {
                const nameA = a.getAttribute('data-name').toLowerCase();
                const nameB = b.getAttribute('data-name').toLowerCase();
                
                if (sortValue === 'az') {
                    return nameA.localeCompare(nameB);
                } else {
                    return nameB.localeCompare(nameA);
                }
            });
            
            // Reorder in the DOM
            cardsArray.forEach(card => {
                gymsContainer.appendChild(card);
            });
        });
        
        // Add Enter key support for search
        searchInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                performSearch();
            }
        });

      
        
        
        
     
        
        // Initialize weather with Tunis coordinates
        updateWeather(36.8065, 10.1815);
        
        // Update time every minute
        setInterval(() => {
            const now = new Date();
            const timeString = now.getHours().toString().padStart(2, '0') + ':' + 
                             now.getMinutes().toString().padStart(2, '0');
            document.getElementById('weather-time').textContent = timeString;
        }, 60000);
    });

  
    
    

  
   
</script>

<!-- Weather Widget JavaScript -->

      
 


   

{% endblock %}